[
  {
    "name": "Accordion",
    "description": "The accordion component allows the user to show and hide sections of related content on a page.",
    "docs_path": "src/Accordion/Accordion.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Accordion } from '@xtreamsrl/react-ui-kit/Accordion';"
      },
      "info": [
        {
          "source": "Accordion.interface.ts",
          "code": "import { SafeKeyOf } from '../utils';\nimport {ReactNode} from \"react\";\n\nexport interface AccordionVariant {\n  block: true;\n  light: true;\n}\n\nexport interface AccordionProps {\n  /**\n   * Must be AccordionSummary and AccordionDetails.\n   */\n  children: ReactNode;\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   *  A test identifier used for testing purposes.\n   */\n  testId?: string;\n  /**\n   * The variant of the accordion. It can be 'block' or 'light'.\n   */\n  variant?: SafeKeyOf<AccordionVariant>;\n}\n"
        },
        {
          "source": "AccordionDetails.interface.ts",
          "code": "import {ReactNode} from \"react\";\n\nexport interface AccordionDetailsProps {\n  /**\n   * The content of the component. It can be any ReactNode\n   */\n  children: ReactNode;\n}\n"
        },
        {
          "source": "AccordionSummary.interface.ts",
          "code": "import {ReactNode} from \"react\";\n\nexport interface AccordionSummaryProps {\n  /**\n   * The textual content of the component.\n   */\n  children: ReactNode;\n  expandIcon?: ReactNode;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Accordion.example.tsx",
          "code": "import { Accordion } from '../Accordion';\nimport React from 'react';\nimport Flex from \"../Flex/Flex\";\nimport {Box} from \"../Box\";\nimport Button from \"../Button/Button\";\n\nconst AccordionExample = () => {\n  return (\n    <>\n      <Accordion variant=\"block\">\n        <Accordion.Summary>Title</Accordion.Summary>\n        <Accordion.Details>Description</Accordion.Details>\n      </Accordion>\n\n      {/* if you dont want any arrow on the right side */}\n      <Accordion variant=\"light\">\n        <Accordion.Summary expandIcon={undefined}>Title</Accordion.Summary>\n        <Accordion.Details>Description</Accordion.Details>\n      </Accordion>\n      <Accordion variant=\"light\" disabled>\n        <Accordion.Summary>\n          <Flex gap='sm-8'>\n            <Box>\n            You can put anything inside the summary\n            </Box>\n            <Button variant=\"plain\">Button</Button>\n          </Flex>\n        </Accordion.Summary>\n        <Accordion.Details>Any ReactNode can be contained in the details</Accordion.Details>\n      </Accordion>\n    </>\n\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Banner",
    "description": "Banner component for displaying messages or alerts.",
    "docs_path": "src/Banner/Banner.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Banner } from '@xtreamsrl/react-ui-kit/Banner';"
      },
      "info": [
        {
          "source": "Banner.interface.ts",
          "code": "import { ReactNode, SyntheticEvent } from 'react';\nimport type { SxProps, Theme } from '@mui/material';\nimport { SafeKeyOf } from '../utils';\n\n/**\n * @interface BannerVariant\n * @member {true} standard corresponds to the 'tinted' Figma variant\n * @member {true} filled corresponds to the 'bold' Figma variant\n */\nexport interface BannerVariant {\n  standard: true;\n  filled: true;\n}\n\nexport interface BannerState {\n  info: true;\n  success: true;\n  warning: true;\n  error: true;\n}\nexport interface BannerProps {\n  /**\n   * The content to be displayed within the Banner.\n   */\n  children: ReactNode;\n  /**\n   * The visual variant of the Banner (e.g., 'standard', 'filled').\n   */\n  variant?: SafeKeyOf<BannerVariant>;\n  /**\n   * The state of the Banner (e.g., 'info', 'success', 'warning', 'error').\n   */\n  state?: SafeKeyOf<BannerState>;\n  /**\n   * The color of the Banner (e.g., 'info', 'success', 'warning', 'error').\n   */\n  color?: SafeKeyOf<BannerState>;\n  /**\n   * The inline style object for additional styling.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Indicates whether the content should be centered within the Banner.\n   */\n  center?: boolean;\n  /**\n   * An optional icon to be displayed within the Banner.\n   */\n  icon?: ReactNode;\n  /**\n   * Callback function triggered when the Banner is closed.\n   */\n  onClose?: (e: SyntheticEvent) => void;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Banner.example.tsx",
          "code": "import React from 'react';\nimport Banner from './Banner';\n\n// Example of Banner usage\nconst Example = () => {\n\n  return (\n    <>\n      <Banner onClose={() => 'close banner'}>\n        <Banner.Message>xtream UI Kit library and design system</Banner.Message>\n        <Banner.PrimaryAction onClick={() => ''}>Learn More</Banner.PrimaryAction>\n        <Banner.SecondaryAction onClick={() => ''}>And More</Banner.SecondaryAction>\n      </Banner>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Box",
    "description": "Box is a component used to wrap content and apply spacing, borders, and background color (like a div).",
    "docs_path": "src/Box/Box.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Box } from '@xtreamsrl/react-ui-kit/Box';"
      },
      "info": [
        {
          "source": "Box.interface.ts",
          "code": "import {BorderProps, Color, DimensionsProps, FlexChildProps, MarginProps, OverflowProps, PaddingProps} from \"../utils\";\nimport {CSSProperties, MouseEventHandler} from \"react\";\nimport {SxProps, Theme} from \"@mui/material/styles\";\n\nexport interface BoxProps extends DimensionsProps, MarginProps, PaddingProps, FlexChildProps, OverflowProps, BorderProps {\n  className?: string,\n  style?: SxProps<Theme>,\n  onClick?: MouseEventHandler<HTMLDivElement>,\n  backgroundColor?: Color\n  textAlign?: CSSProperties['textAlign'],\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Box.example.tsx",
          "code": "import React from 'react';\nimport Box from './Box';\n\n// Example of Box usage\nconst Example = () => {\n\n  return (\n    <>\n      <Box>\n        add anything in here\n      </Box>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Breadcrumbs",
    "description": "Breadcrumbs is a component for displaying a navigation trail, typically used for indicating the current page's\nlocation within a hierarchy of content.",
    "docs_path": "src/Breadcrumbs/Breadcrumbs.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Breadcrumbs } from '@xtreamsrl/react-ui-kit/Breadcrumbs';"
      },
      "info": [
        {
          "source": "Breadcrumbs.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf } from '../utils';\nimport * as React from 'react';\n\nexport interface BreadcrumbsVariants {\n  stroke: true;\n  shape: true;\n}\nexport interface BreadcrumbsProps {\n  /**\n   * The content representing the individual breadcrumb items.\n   */\n  children: ReactNode;\n  /**\n   * The visual variant of the breadcrumbs (e.g., 'stroke', 'shape').\n   */\n  variant?: SafeKeyOf<BreadcrumbsVariants>;\n  /**\n   * The number of breadcrumb items to show after collapsing.\n   */\n  itemsAfterCollapse?: number;\n  /**\n   * The number of breadcrumb items to show before collapsing.\n   */\n  itemsBeforeCollapse?: number;\n  /**\n   * The maximum number of breadcrumb items to display.\n   */\n  maxItems?: number;\n  /**\n   * The custom React node to be used as a separator between breadcrumb items.\n   */\n  separator?: React.ReactNode;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Breadcrumbs.example.tsx",
          "code": "import React from 'react';\nimport Breadcrumbs from './Breadcrumbs';\nimport { Icon } from '../Icon';\nimport { Link } from '../Link';\n\n// Example of Breadcrumbs usage\nconst Example = () => {\n\n  return (\n    <>\n      <Breadcrumbs>\n        <Link size='lg' href='#' rightIcon={<Icon name='Home' />}/>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' current>Link</Link>\n      </Breadcrumbs>\n\n      <Breadcrumbs variant='shape' maxItems={3} itemsAfterCollapse={3} >\n        <Link size='lg' href='#' rightIcon={<Icon name='Home' />}/>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' current>Link</Link>\n      </Breadcrumbs>\n\n      <Breadcrumbs variant='stroke' maxItems={3} itemsBeforeCollapse={2} itemsAfterCollapse={3}>\n        <Link size='lg' href='#' rightIcon={<Icon name='Home' />}/>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' current>Link</Link>\n      </Breadcrumbs>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Button",
    "description": "Button is a component for triggering an action or event.\n\nIt is also used as IconButton, when onlyIcon is true.",
    "docs_path": "src/Button/Button.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Button } from '@xtreamsrl/react-ui-kit/Button';"
      },
      "info": [
        {
          "source": "Button.interface.ts",
          "code": "import { MouseEventHandler, ReactNode } from 'react';\nimport { State, Size, ThemeColor, SafeKeyOf } from '../utils';\nimport { SxProps, Theme } from '@mui/material/styles';\n\ntype ButtonColor = SafeKeyOf<ThemeColor>;\ntype ButtonSize = SafeKeyOf<Size>;\n\n// Button states: hovered, pressed, focused, disabled, loading\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ButtonState extends Omit<State, 'error'> {}\n\n/**\n * @interface ButtonVariant\n * @member {true} filled Figma variant corresponds to the 'contained' Material UI variant\n * @member {true} plain Figma variant corresponds to the 'text' Material UI variant\n */\nexport interface ButtonVariant {\n  filled: true;\n  outlined: true;\n  tinted: true;\n  plain: true;\n}\n\nexport interface BaseButtonProps extends ButtonState {\n  /**\n   * A test identifier used for testing purposes.\n   */\n  testId?: string;\n  /**\n   * The type of the button (e.g., 'button', 'submit', 'reset').\n   */\n  type?: 'button' | 'submit' | 'reset';\n  /**\n   * The event handler called when the button is clicked.\n   */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  /**\n   * The text to be displayed inside the button. If it is set, then the icon and onlyIcon props will be not available.\n   */\n  children?: string;\n  /**\n   * The visual variant of the button (e.g., 'contained', 'outlined', 'tinted', 'text').\n   */\n  variant?: SafeKeyOf<ButtonVariant>;\n  /**\n   * The color of the button, in particular one of the theme colors.\n   */\n  color?: ButtonColor;\n  /**\n   * The size of the button (e.g., 'sm', 'md', 'lg').\n   */\n  size?: ButtonSize;\n  /**\n   * If true, the button will be displayed as an icon button. If it is set, then the children, rightIcon and leftIcon props will be not available.\n   */\n  onlyIcon?: true;\n  /**\n   * The icon element. If it is set, then the children, rightIcon and leftIcon props will be not available. onlyIcon prop will have be set to true.\n   */\n  icon?: ReactNode;\n  /**\n   * The icon element to be displayed on the left side of the button. Settable only if onlyIcon is false.\n   */\n  leftIcon?: ReactNode;\n  /**\n   * The icon element to be displayed on the right side of the button. Settable only if onlyIcon is false.\n   */\n  rightIcon?: ReactNode;\n  /**\n   * The style object to apply to the component.\n   */\n  style?: SxProps<Theme>;\n  /**\n   * The className to apply to the component for styling customization.\n   */\n  className?: string;\n}\n\nexport interface SimpleButtonProps extends BaseButtonProps {\n  children: string;\n  onlyIcon?: undefined;\n  icon?: undefined;\n}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  children?: undefined;\n  onlyIcon: true;\n  icon: ReactNode;\n  leftIcon?: undefined;\n  rightIcon?: undefined;\n}\n\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Button.example.tsx",
          "code": "import React from 'react';\nimport Button from './Button';\nimport { Icon } from '../Icon';\n\n\n// Example of Button usage\nconst Example = () => {\n\n  return (\n    <>\n      <Button onClick={() => console.log('click')} onlyIcon icon={<Icon name=\"Pen\" />} />\n      <Button onClick={() => console.log('click')} color='red' leftIcon={<Icon name=\"Pen\" />} size='sm'>Like</Button>\n      <Button onClick={() => console.log('click')} variant='tinted' color='green'>Success Button</Button>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Card",
    "description": "Card is a React component that wraps content and allows customization of its dimensions.",
    "docs_path": "src/Card/Card.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Card } from '@xtreamsrl/react-ui-kit/Card';"
      },
      "info": [
        {
          "source": "Card.interface.ts",
          "code": "import React, { ReactNode } from 'react';\nimport { DimensionsProps } from '../utils';\n\nexport interface CardProps extends DimensionsProps {\n  className?: string;\n  children: ReactNode;\n  testId?: string;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}\n"
        },
        {
          "source": "Header.interface.ts",
          "code": "import React from 'react';\nimport { TypographyProps } from '@mui/material/Typography';\nimport { PaddingProps } from '../../utils';\nimport { Typography } from '../../Typography';\n\nexport interface CardHeaderProps extends PaddingProps {\n  /**\n   * The action element to be displayed on the card.\n   */\n  action?: React.ReactNode;\n  /**\n   * The avatar element to be displayed on the card.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping the `title` text, and optional `subheader` text with the Typography component.\n   */\n  disableTypography?: boolean;\n  /**\n   * The subheader content to be displayed on the card.\n   */\n  subheader?: React.ReactNode;\n  /**\n   * The title content to be displayed on the card.\n   */\n  title?: React.ReactNode;\n  /**\n   * The typography for the title.\n   */\n  titleTypographyProps?: TypographyProps<\n    typeof Typography,\n    {\n      component?: typeof Typography;\n    }\n  >;\n  /**\n   * The typography for the subheader.\n   */\n  subheaderTypographyProps?: TypographyProps<\n    typeof Typography,\n    {\n      component?: typeof Typography;\n    }\n  >;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Card.example.tsx",
          "code": "import React from 'react';\nimport Card from './Card';\nimport { Button, Flex, Icon } from '../index';\n\n// Example of Card usage\nconst Example = () => {\n\n  return (\n    <>\n      <Card width={300}>\n        <Card.Header title=\"Title\" subheader=\"Subtitle\" action={<Button size='sm' onClick={() => ''} variant='plain' onlyIcon icon={<Icon name=\"MoreVertical\" />} />}></Card.Header>\n        <Card.Image height='fit-content' src='https://mui.com/static/images/cards/live-from-space.jpg' />\n        <Card.Footer p='sm-6'>\n          <Button color='grey' size='sm' variant='plain' onClick={() => ''} onlyIcon icon={<Icon name=\"Heart\" />} />\n        </Card.Footer>\n      </Card>\n\n      <Card height={200}>\n        <Flex p='sm-8' gap='sm-8'>\n          <Card.Image borderRadius={8} width='166px' height='auto' src='https://mui.com/static/images/cards/live-from-space.jpg' />\n          <Flex direction='column' justifyContent='space-between' flex={1}>\n            <Card.Header pt='sm-1' title=\"Title\" subheader=\"Subtitle\" action={<Button size='sm' onClick={() => ''} variant='plain' onlyIcon icon={<Icon name=\"MoreVertical\" />} />}></Card.Header>\n            <Card.Footer p={0}>\n              <Button color='grey' size='sm' variant='plain' onClick={() => ''} onlyIcon icon={<Icon name=\"Heart\" />} />\n            </Card.Footer>\n          </Flex>\n        </Flex>\n      </Card>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Checkbox",
    "description": "Checkbox is a component representing a checkbox input.",
    "docs_path": "src/Checkbox/Checkbox.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Checkbox } from '@xtreamsrl/react-ui-kit/Checkbox';"
      },
      "info": [
        {
          "source": "Checkbox.interface.ts",
          "code": "import React, { ChangeEvent } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\n\n// Checkbox states: hovered, pressed, focused, disabled, error\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface CheckboxState extends Omit<State, 'loading'> {}\nexport interface CheckboxBaseProps extends CheckboxState {\n  name?: string;\n  inputRef?: React.Ref<any>;\n  /**\n   * Callback function triggered when the checkbox state changes.\n   */\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * Indicates whether the checkbox is checked.\n   */\n  checked?: boolean;\n  /**\n   * Indicates whether the checkbox is in an indeterminate state.\n   */\n  indeterminate?: boolean;\n  /**\n   * The size of the checkbox (e.g., 'sm', 'md', 'lg')\n   */\n  size?: SafeKeyOf<Size>;\n}\n\nexport type CheckboxProps = CheckboxBaseProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Checkbox.example.tsx",
          "code": "import React from 'react';\nimport Checkbox from './Checkbox';\n\n// Example of Checkbox usage\nconst Example = () => {\n\n  return (\n    <>\n      <Checkbox checked disabled />\n      <Checkbox checked={false} />\n      <Checkbox indeterminate error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "CheckboxLabel",
    "description": "CheckboxLabel is a React component representing a labeled checkbox.",
    "docs_path": "src/CheckboxLabel/CheckboxLabel.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { CheckboxLabel } from '@xtreamsrl/react-ui-kit/CheckboxLabel';"
      },
      "info": [
        {
          "source": "CheckboxLabel.interface.ts",
          "code": "import { CheckboxBaseProps } from '../Checkbox';\n\nexport interface CheckboxLabelProps extends CheckboxBaseProps {\n  /**\n   * The main label associated with the checkbox.\n   */\n  label: string;\n  name?: string;\n  /**\n   * Additional caption or description for the checkbox.\n   */\n  caption?: string;\n  inputRef?: React.Ref<any>\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "CheckboxLabel.example.tsx",
          "code": "import React from 'react';\nimport CheckboxLabel from './CheckboxLabel';\n\n// Example of CheckboxLabel usage\nconst Example = () => {\n\n  return (\n    <>\n      <CheckboxLabel label='Label' caption='caption' size='sm' indeterminate checked onChange={() => ''} />\n      <CheckboxLabel label='Label' checked onChange={() => ''} />\n      <CheckboxLabel label='Label' error checked onChange={() => ''} />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Combobox",
    "description": "Combobox component is used to combobox a single value from a list.",
    "docs_path": "src/Combobox/Combobox.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Combobox } from '@xtreamsrl/react-ui-kit/Combobox';"
      },
      "info": [
        {
          "source": "Combobox.interface.ts",
          "code": "import React, { ReactNode } from 'react';\nimport {\n  AutocompleteChangeDetails,\n  AutocompleteChangeReason,\n  AutocompleteFreeSoloValueMapping,\n  AutocompleteRenderOptionState, AutocompleteValue,\n} from '../Multiselect';\nimport { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\n\nexport interface ComboboxInputProps<Value> {\n  /**\n   * The options of the combobox.\n   */\n  options: ReadonlyArray<Value>;\n  /**\n   * Callback function that is called when the value of the combobox changes.\n   */\n  onChange?: (\n    event: React.SyntheticEvent,\n    value: AutocompleteValue<Value, false, false, false>,\n    reason: AutocompleteChangeReason,\n    details?: AutocompleteChangeDetails<Value>,\n  ) => void;\n  /**\n   * The text to display when there are no options. Any valid node can be used.\n   */\n  noOptionsText: ReactNode;\n  /**\n   * The value of the combobox.\n   */\n  value?: AutocompleteValue<Value, false, false, false>;\n  /**\n   * The function used to get the label of an option.\n   */\n  getOptionLabel?: (option: Value | AutocompleteFreeSoloValueMapping<boolean | undefined>) => string;\n  /**\n   * The function used to render an option.\n   */\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: Value,\n    state: AutocompleteRenderOptionState,\n    ownerState: any,\n  ) => React.ReactNode;\n}\n\ntype TextInputProps = Omit<TextLabelInputProps, 'value' | 'onChange'>;\ntype CustomLabelProps = Omit<CustomLabelInputProps, 'value' | 'onChange'>;\n\nexport interface TextLabelComboboxInputProps<Value> extends ComboboxInputProps<Value>, TextInputProps {}\nexport interface CustomLabelComboboxInputProps<Value> extends ComboboxInputProps<Value>, CustomLabelProps {}\n\nexport type ComboboxProps<Value> = TextLabelComboboxInputProps<Value> | CustomLabelComboboxInputProps<Value>;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Combobox.example.tsx",
          "code": "import React from 'react';\nimport Combobox from './Combobox';\nimport Select from '../Select/Select';\nimport { Checkbox } from '../Checkbox';\n\n// Example of Combobox usage\nconst Example = () => {\n\n  return (\n    <>\n      <Combobox\n        noOptionsText='No options'\n        size='lg'\n        options={['One', 'Two', 'Three']}\n        name='checkbox'\n        label='Label'\n        renderOption={(props, option, state, ownerState) => {\n          return (\n            <Select.Option {...props} startAddOn={<Checkbox checked={state.selected} />}>\n              {ownerState.getOptionLabel(option)}\n            </Select.Option>\n          )}}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "DateInput",
    "description": "DateInput is a component used to get user input in a date field.",
    "docs_path": "src/DateInput/DateInput.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { DateInput } from '@xtreamsrl/react-ui-kit/DateInput';"
      },
      "info": [
        {
          "source": "DateInput.interface.ts",
          "code": "import { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\n\ntype TextInputProps = Omit<TextLabelInputProps, 'value' | 'onChange' | 'endInputAddOn'>;\ntype CustomLabelProps = Omit<CustomLabelInputProps, 'value' | 'onChange' | 'endInputAddOn'>;\n\nexport type CalendarPickerView = 'year' | 'day' | 'month';\n\n/**\n * DateInput is a component used to get user input in a date field.\n *\n * @param views - The views that the date picker should show. It can be an array of 'year', 'month' and 'day'.\n * @param actions - If true, the date picker will display the clear and today buttons.\n * @param format - The format of the date. Default is 'DD/MM/YYYY'.\n * @param value - The value of the date input. It can be a Date or null.\n * @param onChange - Callback function that is called when the value of the date picker changes.\n *\n * @param className - CSS class that will be applied to the date input for custom styling.\n * @param readonly - If true, the date input will be read-only.\n * @param testId - A test identifier used for testing purposes.\n * @param name - The name of the date input. It is used to reference form data after a form is submitted.\n * @param onClick - Callback function that is called when the date input is clicked.\n * @param type - The type of the date input (e.g. 'text', 'number', 'email', etc).\n * @param variant - The variant of the date input (e.g. 'filled', 'outlined', 'standard').\n * @param onBlur - Callback function that is called when the date input loses focus.\n * @param inputRef - A ref that is used to get the date input's input element.\n * @param size - The size of the date input component (e.g., 'sm', 'md', 'lg').\n * @param required - If true, the date input will be required.\n * @param multiline - If true, the date input will be multiline.\n * @param autoComplete - The attribute that controls the autocomplete behaviour. It can assume various values, like 'on', 'off', but also 'new-password', 'honorific-prefix' and many others.\n * @param startInputAddOn - Additional content or icon to be displayed at the start of the date input.\n * @param placeholder - The placeholder of the date input.\n * @param disabled - If true, the date input will be disabled.\n * @param error - If true, the date input will display an error state.\n * @param hint - The hint text of the date input.\n * @param hintProps - Props applied to the hint element. The only field contained by this prop is 'size'.\n *\n * @param label - The label of the date input. It can be a string or a React node.\n * @param labelProps - Props applied to the label element. It is available only when label is a string.\n * It contains the following fields: 'htmlFor', 'size', 'description' and 'icon'.\n */\nexport interface BaseDateInputProps {\n  /**\n   * The views that the date picker should show. It can be an array of 'year', 'month' and 'day'.\n   */\n  views?: CalendarPickerView[];\n  /**\n   * If true, the date picker will display the clear and today buttons.\n   */\n  actions?: boolean;\n  /**\n   * The format of the date. Default is 'DD/MM/YYYY'.\n   */\n  format?: string;\n  /**\n   * The value of the date input. It can be a Date or null.\n   */\n  value?: Date | null;\n  /**\n   * Callback function that is called when the value of the date picker changes.\n   */\n  onChange?: (date: Date | null) => void;\n}\n\nexport interface TextLabelDateInputProps extends BaseDateInputProps, TextInputProps {}\nexport interface CustomLabelDateInputProps extends BaseDateInputProps, CustomLabelProps {}\n\nexport type DateInputProps = TextLabelDateInputProps | CustomLabelDateInputProps;\n\nexport interface PickersActionBarProps {\n  /**\n   * Callback function that is called when the clear button is clicked.\n   */\n  onClear: () => void;\n  /**\n   * Callback function that is called when the today button is clicked.\n   */\n  onSetToday: () => void;\n  /**\n   * CSS class that will be applied to the date input for custom styling.\n   */\n  className?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "DateInput.example.tsx",
          "code": "import React from 'react';\nimport DateInput from './DateInput';\nimport { TextInput } from '../TextInput';\nimport Icon from '../Icon/Icon';\n\n// Example of DateInput usage\nconst Example = () => {\n\n  return (\n    <>\n      <DateInput\n        size='lg'\n        name='birthday'\n        label='Birthday'\n        required\n        onChange={(date) => console.log('birthday', date)}\n      />\n\n      <DateInput\n        size='sm'\n        name='startDate'\n        label='Start Date'\n        labelProps={{ description: 'The day you started working', icon: <Icon name='Info' /> }}\n        actions\n        startInputAddOn={<TextInput.AddOn>From</TextInput.AddOn>}\n        onChange={(date) => console.log('from', date)}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Divider",
    "description": "Divider is a React component representing a visual separator.",
    "docs_path": "src/Divider/Divider.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Divider } from '@xtreamsrl/react-ui-kit/Divider';"
      },
      "info": [
        {
          "source": "Divider.interface.ts",
          "code": "import {SafeKeyOf} from '../utils';\n\nexport interface DividerTextAlignment {\n  center: string;\n  right: string;\n  left: string;\n  top: string;\n  bottom: string;\n  none: string;\n}\n\nexport interface DividerDirection {\n  horizontal: true;\n  vertical: true;\n}\n\nexport interface DividerProps {\n  /**\n   * Text content to be displayed within the Divider.\n   */\n  children?: string;\n  /**\n   * Alignment of the text in the Divider (e.g., 'right', 'center', 'left', 'top', 'bottom', 'none'). Default to 'center'.\n   */\n  showText?: SafeKeyOf<DividerTextAlignment>,\n  /**\n   * The direction of the Divider (e.g., 'horizontal', 'vertical'). Default to 'horizontal'.\n   */\n  direction?: SafeKeyOf<DividerDirection>\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Divider.example.tsx",
          "code": "import React from 'react';\nimport Divider from './Divider';\nimport {Flex} from \"../Flex\";\n\n// Example of Divider usage\nconst Example = () => {\n\n  return (\n    <>\n        <Flex direction='row' gap='sm-8' padding='sm-8'>\n            <Divider showText={\"center\"} direction={\"vertical\"}>Text</Divider>\n            <Divider showText={\"top\"} direction={\"vertical\"}>Text</Divider>\n            <Divider showText={\"bottom\"} direction={\"vertical\"}>Text</Divider>\n            <Divider direction={\"vertical\"}/>\n        </Flex>\n\n        {/* These two are equal */}\n        <Divider children={\"test\"} direction={\"horizontal\"} showText={'none'}/>\n        <Divider/>\n\n        <Divider showText={\"center\"} direction={\"horizontal\"}>Text</Divider>\n        <Divider showText={\"left\"} direction={\"horizontal\"}>Text</Divider>\n        <Divider showText={\"right\"} direction={\"horizontal\"}>Text</Divider>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Dropmenu",
    "description": "Dropmenu is a React component representing a dropdown menu.",
    "docs_path": "src/Dropmenu/Dropmenu.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Dropmenu } from '@xtreamsrl/react-ui-kit/Dropmenu';"
      },
      "info": [
        {
          "source": "Dropmenu.interface.ts",
          "code": "import React from 'react';\nexport interface DropmenuProps {\n  /**\n   * The anchor element to which the Dropmenu is attached.\n   */\n  anchorEl?:\n    | null\n    | Element\n    | (() => Element);\n  /**\n   * The position of the Dropmenu ('left', 'center', 'right').\n   */\n  position?: 'left' | 'center' | 'right';\n  /**\n   * Indicates whether the Dropmenu is open.\n   */\n  open?: boolean;\n  /**\n   * Callback function triggered when the Dropmenu is closed.\n   */\n  onClose?: {\n    bivarianceHack(event: {}, reason: 'backdropClick' | 'escapeKeyDown'): void;\n  }['bivarianceHack'];\n  /**\n   * The content to be displayed within the Dropmenu.\n   */\n  children?: React.ReactNode;\n}\n"
        },
        {
          "source": "Item.interface.ts",
          "code": "import { ReactNode, MouseEventHandler } from 'react';\nimport { SafeKeyOf, Size } from '../../utils';\n\nexport interface DropmenuItemProps {\n  /**\n   * The content to be displayed within the DropmenuItem.\n   */\n  children: ReactNode;\n  /**\n   * Callback function triggered when the DropmenuItem is clicked.\n   */\n  onClick?: MouseEventHandler<HTMLLIElement>;\n  /**\n   * The value associated with the DropmenuItem.\n   */\n  value?: string | number;\n  /**\n   * The size of the DropmenuItem (e.g., 'sm', 'md', 'lg').\n   */\n  size?: SafeKeyOf<Size>;\n  /**\n   * If `true`, the DropmenuItem is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Indicates whether the DropmenuItem is selected.\n   */\n  selected?: boolean;\n  /**\n   * Additional content or icon to be displayed at the start of the DropmenuItem.\n   */\n  startAddOn?: ReactNode;\n  /**\n   * Additional content or icon to be displayed at the end of the DropmenuItem.\n   */\n  endAddOn?: ReactNode;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Dropmenu.example.tsx",
          "code": "import Button from '../Button/Button';\nimport { useDropmenu } from './hooks/useDropmenu';\nimport Dropmenu from './Dropmenu';\nimport Icon from '../Icon/Icon';\n\n// Example of Dropmenu usage\nconst Example = () => {\n  const { anchorEl, isOpen, openDropmenu, closeDropmenu } = useDropmenu();\n\n  return (\n    <>\n      <Button onClick={openDropmenu}>Trigger</Button>\n\n      <Dropmenu open={isOpen} anchorEl={anchorEl} onClose={closeDropmenu}>\n        <Dropmenu.Header>Header</Dropmenu.Header>\n        <Dropmenu.Item onClick={() => ''} size='sm' startAddOn={<Icon name='Home' />} endAddOn='AAAA' value={10}>Ten</Dropmenu.Item>\n        <Dropmenu.Item onClick={() => ''} size='sm' value={20}>Twenty</Dropmenu.Item>\n        <Dropmenu.Item disabled onClick={() => ''} size='sm' value={30}>Thirty</Dropmenu.Item>\n        <Dropmenu.Footer>Footer</Dropmenu.Footer>\n      </Dropmenu>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Feedback",
    "description": "Feedback is a React component for collecting user feedback, offering emoji or thumb reactions.",
    "docs_path": "src/Feedback/Feedback.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Feedback } from '@xtreamsrl/react-ui-kit/Feedback';"
      },
      "info": [
        {
          "source": "Feedback.interface.ts",
          "code": "import { SafeKeyOf } from '../utils'\n\nexport interface FeedbackType {\n  emoji: true,\n  thumb: true\n}\n\nexport interface FeedbackSize {\n  sm: true\n  md: true\n  lg: true\n}\n\nexport type FeedbackValues<T extends SafeKeyOf<FeedbackType>> =\n    T extends \"emoji\" ? 'like' | 'dislike' | 'neutral' | null : 'like' | 'dislike' | null;\n\nexport interface BaseFeedbackProps {\n  /**\n   * The size of the feedback component.\n   */\n  size?: SafeKeyOf<FeedbackSize>\n  value: FeedbackValues<SafeKeyOf<FeedbackType>>;\n}\n\nexport interface EmojiFeedbackProps extends BaseFeedbackProps {\n  /**\n   * Specifies the type of feedback, either 'emoji' or 'thumb'.\n   */\n  type: 'emoji'\n  /**\n   *  Callback function triggered when the feedback value changes.\n   */\n  onChange?: (value : FeedbackValues<'emoji'>) => void\n  /**\n   * Represents the selected value for feedback, options include 'like', 'dislike', 'neutral', or 'null'.\n   *   'neutral' is not available when the type is 'thumb'.\n   */\n  value: 'like' | 'dislike' | 'neutral' | null\n}\n\nexport interface ThumbFeedbackProps extends BaseFeedbackProps {\n  /**\n   * Specifies the type of feedback, either 'emoji' or 'thumb'.\n   */\n  type: 'thumb',\n  /**\n   *  Callback function triggered when the feedback value changes.\n   */\n  onChange?: (value : FeedbackValues<'thumb'>) => void;\n  /**\n   * Represents the selected value for feedback, options include 'like', 'dislike', 'neutral', or 'null'.\n   *   'neutral' is not available when the type is 'thumb'.\n   */\n  value: 'like' | 'dislike' | null\n}\n\nexport type FeedbackProps = EmojiFeedbackProps | ThumbFeedbackProps;\n\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Feedback.example.tsx",
          "code": "import React, {useState} from 'react';\nimport Feedback from './Feedback';\nimport {Flex} from \"../Flex\";\nimport {FeedbackValues} from \"./Feedback.interface\";\n\n// Example of Feedback usage\nconst Example = () => {\n    const [checkedEmoji, setCheckedEmoji] = useState<FeedbackValues<'emoji'>>('like')\n    const [checkedThumb, setCheckedThumb] = useState<FeedbackValues<'thumb'>>(null)\n\n    //the state is required for each Feedback\n\n    return (\n    <>\n        <Flex gap={'md-8'}>\n            <Flex direction=\"column\" gap='sm-2'>\n                <Feedback onChange={(value) => setCheckedEmoji(value)} value={checkedEmoji} size={'sm'} type={'emoji'}/>\n                <Feedback type='emoji' size='md' value={null}/>\n                <Feedback type='emoji' size='lg' value={null}/>\n            </Flex>\n\n            <Flex direction=\"column\" gap='sm-2'>\n                <Feedback onChange={(value) => setCheckedThumb(value)} value={checkedThumb} size={'sm'} type={'thumb'}/>\n                <Feedback type='thumb' size='md' value={null}/>\n                <Feedback type='thumb' size='lg' value={null}/>\n            </Flex>\n        </Flex>\n\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "FileInput",
    "description": "FileInput is a component used to get user input in a file field.",
    "docs_path": "src/FileInput/FileInput.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { FileInput } from '@xtreamsrl/react-ui-kit/FileInput';"
      },
      "info": [
        {
          "source": "FileInput.interface.ts",
          "code": "import { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\nimport { State } from '../utils';\n\n\nexport interface BaseFileInputProps {\n  /**\n   * The types of files that the file input can accept.\n   */\n  accept?: string;\n  /**\n   * If true, the file input will display a loading spinner.\n   */\n  loading?: State['loading'];\n  /**\n   * The value of the input. It can be a File or null.\n   */\n  value: File | null;\n  /**\n   * Callback function that is called when the value of the file input changes.\n   * @param file\n   */\n  onChange: (file: File | null) => void;\n  /**\n   * The text of the cancel button. This must be passed from outside to allow internationalization.\n   */\n  uploadButtonText: string;\n  /**\n   * The text of the upload button. This must be passed from outside to allow internationalization.\n   */\n  cancelButtonText: string;\n  /**\n   * The placeholder of the file input.\n   */\n  placeholder: string;\n}\n\ntype PropsToOmit = 'endInputAddOn' | 'type' | 'value' | 'onChange' | 'placeholder';\nexport interface TextLabelFileInputProps extends BaseFileInputProps, Omit<TextLabelInputProps, PropsToOmit> {}\nexport interface CustomLabelFileInputProps extends BaseFileInputProps,  Omit<CustomLabelInputProps, PropsToOmit> {}\n\nexport type FileInputProps = TextLabelFileInputProps | CustomLabelFileInputProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "FileInput.example.tsx",
          "code": "import React, { useState } from 'react';\nimport FileInput from './FileInput';\n\n// Example of FileInput usage\nconst Example = () => {\n  const [file, setFile] = useState<File | null>(null);\n\n  return (\n    <>\n      <FileInput\n        loading\n        size='sm'\n        variant='filled'\n        cancelButtonText='Cancel'\n        uploadButtonText='Browse'\n        label='File'\n        name='uplaod'\n        onChange={file => setFile(file)}\n        placeholder='Upload'\n        value={file}\n      />\n      <FileInput\n        error\n        size='md'\n        variant='standard'\n        cancelButtonText='Cancel'\n        uploadButtonText='Browse'\n        label='File'\n        name='uplaod'\n        onChange={file => setFile(file)}\n        placeholder='Upload'\n        value={file}\n      />\n      <FileInput\n        disabled\n        size='lg'\n        variant='outlined'\n        cancelButtonText='Cancel'\n        uploadButtonText='Browse'\n        label='File'\n        name='uplaod'\n        onChange={file => setFile(file)}\n        placeholder='Upload'\n        value={file}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Flex",
    "description": "Flex component is a wrapper component that allows you to easily create a flex container element.",
    "docs_path": "src/Flex/Flex.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Flex } from '@xtreamsrl/react-ui-kit/Flex';"
      },
      "info": [
        {
          "source": "Flex.interface.ts",
          "code": "import { CSSProperties } from 'react';\nimport {\n  BorderProps,\n  Color,\n  DimensionsProps, FlexChildProps,\n  MarginProps, OverflowProps,\n  PaddingProps,\n  ResponsiveStyleValue,\n  Space,\n} from '../utils';\n\nexport interface FlexProps extends MarginProps, PaddingProps, DimensionsProps, BorderProps, FlexChildProps, OverflowProps {\n  /**\n   * The direction of the flex container.\n   */\n  direction?: ResponsiveStyleValue<'row' | 'row-reverse' | 'column' | 'column-reverse'>;\n  /**\n   * The gap between the flex items.\n   */\n  gap?: ResponsiveStyleValue<number | string | Space>;\n  flexWrap?: CSSProperties['flexWrap'];\n  alignContent?: CSSProperties['alignContent'];\n  alignItems?: CSSProperties['alignItems'];\n  justifyContent?: CSSProperties['justifyContent'];\n  justifyItems?: CSSProperties['justifyItems'];\n  justifySelf?: CSSProperties['justifySelf'];\n  className?: string;\n  backgroundColor?: Color;\n  position?: CSSProperties['position']\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Flex.example.tsx",
          "code": "import React from 'react';\nimport Flex from './Flex';\n\n// Example of Flex usage\nconst Example = () => {\n\n  return (\n    <Flex gap={2}>\n      <div>AAA</div>\n      <div>AAA</div>\n    </Flex>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Icon",
    "description": "Icon is a component for displaying icons.",
    "docs_path": "src/Icon/Icon.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Icon } from '@xtreamsrl/react-ui-kit/Icon';"
      },
      "info": [
        {
          "source": "Icon.interface.ts",
          "code": "import { icons } from 'lucide-react';\nimport { AnyOtherString, ThemeColor, SafeKeyOf } from '../utils';\nimport React, { CSSProperties } from 'react';\n\ntype LucideIconName = keyof typeof icons;\ntype IconColor = SafeKeyOf<ThemeColor>;\nexport interface IconBaseProps {\n  /**\n   * The font size of the icon.\n   */\n  fontSize?: CSSProperties['fontSize'];\n  /**\n   * The color of the icon. It can be a theme color or a custom color.\n   */\n  color?: IconColor | AnyOtherString;\n\n  name?: LucideIconName;\n  children?: React.ReactNode;\n}\n\nexport interface LucideIcon extends IconBaseProps {\n  /**\n   * The name of the icon to display, from the Lucide icon library\n   */\n  name: LucideIconName;\n  children?: undefined;\n}\nexport interface CustomIcon extends IconBaseProps {\n  /**\n   * The icon to display. Available only if name is not provided.\n   */\n  children: React.ReactNode;\n  name?: undefined;\n}\n\nexport type IconProps = LucideIcon | CustomIcon;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Icon.example.tsx",
          "code": "import React from 'react';\nimport Icon from './Icon';\n\n// Example of Icon usage\nconst Example = () => {\n\n  return (\n    <>\n      <Icon name='Diamond' color='brand' />\n      <Icon name='Diamond' color='warning.6' />\n      <Icon name='Diamond' fontSize={40} />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Link",
    "description": "Link component allows to navigate between pages in the same application.",
    "docs_path": "src/Link/Link.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Link } from '@xtreamsrl/react-ui-kit/Link';"
      },
      "info": [
        {
          "source": "Link.interface.ts",
          "code": "import { MouseEventHandler, ReactNode } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\nimport { TypographyProps } from '../Typography';\n\n\nexport interface LinkProps extends Pick<State, 'disabled'> {\n  /**\n   * The content of the link.\n   */\n  children?: string;\n  /**\n   * The URL to link to when the link is clicked.\n   */\n  href?: string;\n  /**\n   * The event handler called when the link is clicked.\n   */\n  onClick?: MouseEventHandler<HTMLAnchorElement>;\n  /**\n   * The size of the link (e.g., 'sm', 'md', 'lg').\n   */\n  size?: SafeKeyOf<Size>;\n  /**\n   * The color of the link.\n   */\n  color?: TypographyProps['color'];\n  /**\n   * If true, the link will have an underline.\n   */\n  underline?: boolean;\n  /**\n   * The icon to display on the left side of the link.\n   */\n  leftIcon?: ReactNode;\n  /**\n   * The icon to display on the right side of the link.\n   */\n  rightIcon?: ReactNode;\n  /**\n   * If true, the link will be disabled. It indicates that the link is the current page.\n   */\n  current?: boolean;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Link.example.tsx",
          "code": "import React from 'react';\nimport Link from './Link';\nimport Icon from '../Icon/Icon';\n\n// Example of Link usage\nconst Example = () => {\n\n  return (\n    <>\n      <Link size='lg' underline href='#' rightIcon={<Icon name='ArrowRight' />}>View more</Link>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Modal",
    "description": "Modal component is used to display content in a layer above the app.",
    "docs_path": "src/Modal/Modal.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Modal } from '@xtreamsrl/react-ui-kit/Modal';"
      },
      "info": [
        {
          "source": "Modal.interface.ts",
          "code": "import { MouseEventHandler, ReactNode } from 'react';\n\nexport interface ModalProps {\n  /**\n   * If true, the modal is open.\n   */\n  open: boolean;\n  /**\n   * Callback function called when the modal is closed.\n   */\n  onClose: MouseEventHandler<HTMLButtonElement | HTMLDivElement>;\n  /**\n   * Modal.Header, Modal.Content, Modal.Footer. Only Modal.Content is required. Modal.Header and Modal.Footer are optional.\n   */\n  children: ReactNode;\n  /**\n   * If true, the close button is displayed.\n   */\n  showCloseButton?: boolean;\n}\n"
        },
        {
          "source": "ModalContent.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { DimensionsProps } from '../../utils';\n\nexport interface ModalContentProps {\n  /**\n   * The content of the component. It accepts any valid React element.\n   */\n  children: ReactNode;\n  /**\n   * The max height of the content.\n   */\n  maxHeight?: DimensionsProps['height'];\n}\n"
        },
        {
          "source": "ModalFooter.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf } from '../../utils';\n\nexport interface ModalFooterType {\n  right: string;\n  left: string;\n  fullwidth: string;\n}\n\nexport interface ModalFooterProps {\n  /**\n   * The content of the component are buttons. Only Modal.PrimaryAction and Modal.SecondaryAction are allowed as children.\n   */\n  children: ReactNode;\n  /**\n   * The type of the footer. It can be 'right', 'left', or 'fullwidth'.\n   */\n  type: SafeKeyOf<ModalFooterType>;\n  /**\n   * If true, a divider is displayed.\n   */\n  divider?: boolean;\n}\n"
        },
        {
          "source": "ModalHeader.interface.ts",
          "code": "import { SafeKeyOf } from '../../utils';\n\nexport interface ModalHeaderVariant {\n  regular: true;\n  bold: true;\n}\n\nexport interface ModalHeaderProps {\n  /**\n   * The content of the component: the text of the header.\n   */\n  children: string;\n  /**\n   * The variant to use (e.g., 'regular' or 'bold'). Defaults to 'regular'.\n   */\n  variant?: SafeKeyOf<ModalHeaderVariant>;\n}\n"
        },
        {
          "source": "PrimaryAction.interface.ts",
          "code": "import { MouseEventHandler } from 'react';\n\nexport interface PrimaryActionProps {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  /**\n   * The content of the component: the text of the button.\n   */\n  /**\n   * Callback function called when the button is clicked.\n   */\n  children: string;\n}\n"
        },
        {
          "source": "SecondaryAction.interface.ts",
          "code": "import { MouseEventHandler } from 'react';\n\nexport interface SecondaryActionProps {\n  /**\n   * Callback function called when the button is clicked.\n   */\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  /**\n   * The content of the component: the text of the button.\n   */\n  children: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Modal.example.tsx",
          "code": "import React, { useState } from 'react';\nimport Modal from './Modal';\nimport { Typography } from '../Typography';\n\n// Example of Modal usage\nconst Example = () => {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <Modal open={open} onClose={() => setOpen(false)}>\n      <Modal.Header>Header</Modal.Header>\n      <Modal.Content>\n        <Typography variant=\"body/sm/regular\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas in\n          ante in leo consequat sagittis. Integer a dictum nibh. Aliquam purus\n          ipsum.\n        </Typography>\n      </Modal.Content>\n      <Modal.Footer type=\"left\">\n        <Modal.PrimaryAction onClick={() => console.log('click')}>\n          Primary Action\n        </Modal.PrimaryAction>\n        <Modal.SecondaryAction onClick={() => console.log('click')}>\n          Secondary Action\n        </Modal.SecondaryAction>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Multiselect",
    "description": "Multiselect component is used to select multiple values from a list.",
    "docs_path": "src/Multiselect/Multiselect.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Multiselect } from '@xtreamsrl/react-ui-kit/Multiselect';"
      },
      "info": [
        {
          "source": "Multiselect.interface.ts",
          "code": "import React, { ReactNode } from 'react';\nimport { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\n\n\nexport type AutocompleteFreeSoloValueMapping<FreeSolo> = FreeSolo extends true ? string : never;\nexport interface AutocompleteRenderOptionState {\n  inputValue: string;\n  index: number;\n  selected: boolean;\n}\n\nexport type AutocompleteRenderGetTagProps = ({ index }: { index: number }) => {\n  key: number;\n  className: string;\n  disabled: boolean;\n  'data-tag-index': number;\n  tabIndex: -1;\n  onDelete: (event: any) => void;\n};\n\nexport type AutocompleteChangeReason =\n  | 'createOption'\n  | 'selectOption'\n  | 'removeOption'\n  | 'clear'\n  | 'blur';\nexport interface AutocompleteChangeDetails<Value = string> {\n  option: Value;\n}\n\nexport type AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo> = Multiple extends true\n  ? Array<Value | AutocompleteFreeSoloValueMapping<FreeSolo>>\n  : DisableClearable extends true\n    ? NonNullable<Value | AutocompleteFreeSoloValueMapping<FreeSolo>>\n    : Value | null | AutocompleteFreeSoloValueMapping<FreeSolo>;\n\n\nexport interface MultiselectInputProps<Value> {\n  /**\n   * The options of the multi-select. An array of possible values.\n   */\n  options: ReadonlyArray<Value>;\n  /**\n   * The text to display when there are no options. Any valid node can be used.\n   */\n  noOptionsText: ReactNode;\n  /**\n   * The value of the multi-select.\n   */\n  value?: AutocompleteValue<Value, true, false, false>;\n  /**\n   * Callback function that is called when the value of the multi-select changes.\n   */\n  onChange?: (\n    event: React.SyntheticEvent,\n    value: AutocompleteValue<Value, true, false, false>,\n    reason: AutocompleteChangeReason,\n    details?: AutocompleteChangeDetails<Value>,\n  ) => void;\n  /**\n   * The function used to get the label of an option.\n   */\n  getOptionLabel?: (option: Value | AutocompleteFreeSoloValueMapping<boolean | undefined>) => string;\n  /**\n   * The function used to render an option.\n   */\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: Value,\n    state: AutocompleteRenderOptionState,\n    ownerState: any,\n  ) => React.ReactNode;\n  /**\n   * The function used to render the tags.\n   */\n  renderTags?: (\n    value: AutocompleteValue<Value, true, false, false>,\n    getTagProps: AutocompleteRenderGetTagProps,\n    ownerState: any,\n  ) => React.ReactNode;\n}\n\ntype TextInputProps = Omit<TextLabelInputProps, 'value' | 'onChange'>;\ntype CustomLabelProps = Omit<CustomLabelInputProps, 'value' | 'onChange'>;\n\nexport interface TextLabelMultiselectInputProps<Value> extends MultiselectInputProps<Value>, TextInputProps {}\nexport interface CustomLabelMultiselectInputProps<Value> extends MultiselectInputProps<Value>, CustomLabelProps {}\n\nexport type MultiselectProps<Value> = TextLabelMultiselectInputProps<Value> | CustomLabelMultiselectInputProps<Value>;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Multiselect.example.tsx",
          "code": "import React from 'react';\nimport Multiselect from './Multiselect';\nimport Icon from '../Icon/Icon';\nimport Select from '../Select/Select';\nimport { Tag } from '../Tag';\n\n// Example of Multiselect usage\nconst Example = () => {\n\n  return (\n    <>\n      <Multiselect\n        noOptionsText='No options'\n        size='lg'\n        options={['One', 'Two', 'Three']}\n        name='numbers'\n        label='Label'\n      />\n\n      <Multiselect\n        noOptionsText='No users'\n        size='lg'\n        options={['John Doe', 'Jane Doe', 'Bruce Lee']}\n        name='numbers'\n        renderOption={(props, option, state, ownerState) => (\n          <Select.Option {...props} startAddOn={<Icon name='User' />}>\n            {ownerState.getOptionLabel(option)}\n          </Select.Option >\n        )}\n        renderTags={(values, getTagProps, { getOptionLabel }) => {\n          return values.map((value, index) => (\n            <Tag size='md' icon={<Icon name='User' />} text={(getOptionLabel ? getOptionLabel(value) : value) as string} {...getTagProps({ index })} />\n          ));\n        }}\n        label='Users'\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Pagination",
    "description": "Pagination component is used to navigate through pages of related content.",
    "docs_path": "src/Pagination/Pagination.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Pagination } from '@xtreamsrl/react-ui-kit/Pagination';"
      },
      "info": [
        {
          "source": "Pagination.interface.ts",
          "code": "import React from \"react\";\nimport {SafeKeyOf, Size} from \"../utils\";\n\nexport interface PaginationShape {\n  square: true,\n  circle: true\n}\n\nexport interface BorderedPaginationType {\n  splitted: true,\n  separated: true,\n}\n\nexport interface PaginationColor {\n  slate: true,\n  brand: true\n}\n\ninterface BasePaginationProps {\n  /**\n   * The size of the pagination buttons (e.g., 'sm', 'md').\n   */\n  size?: SafeKeyOf<Omit<Size, 'lg'>>,\n  /**\n   * If true, 'previous' button will be shown.\n   */\n  showPrevious?: boolean,\n  /**\n   * If true, 'next' button will be shown.\n   */\n  showNext?: boolean\n  /**\n   * The total number of pages.\n   */\n  count: number\n  /**\n   * If true, the pagination buttons will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The current page number.\n   */\n  page?: number\n  /**\n   * Callback fired when the page is changed.\n   */\n  onChange?: (event: React.ChangeEvent<unknown>, page: number) => void\n}\n\ninterface SquareBorderlessPaginationProps extends BasePaginationProps {\n  /**\n   * The shape of the pagination buttons\n   */\n  shape: 'square';\n  /**\n   * The color of the pagination buttons (e.g., 'brand', 'slate').\n   */\n  color?: keyof PaginationColor;\n  /**\n   * The type of the pagination buttons\n   */\n  type: 'borderless'\n}\n\ninterface SquareBorderedPaginationProps extends BasePaginationProps {\n  /**\n   * The shape of the pagination buttons\n   */\n  shape: 'square'\n  /**\n   * The color of the pagination buttons (e.g., 'brand', 'slate').\n   */\n  color?: 'slate'\n  /**\n   * The type of the pagination buttons\n   */\n  type: keyof BorderedPaginationType\n}\n\ninterface CirclePaginationProps extends BasePaginationProps {\n  shape: 'circle'\n  /**\n   * The color of the pagination buttons (e.g., 'brand', 'slate').\n   */\n  color?: keyof PaginationColor\n  /**\n   * The type of the pagination buttons\n   */\n  type: 'borderless'\n}\n\ninterface PrevNextPaginationProps {\n  /**\n   * If true, 'previous' and 'next' buttons will show only the icon without text.\n   */\n  minified?: false,\n  /**\n   * The text of the 'previous' button. If minified is true, this prop will not be available.\n   */\n  previousText?: string,\n  /**\n   * The text of the 'next' button. If minified is true, this prop will not be available.\n   */\n  nextText?: string,\n}\n\ninterface NoPrevNextPaginationProps {\n  /**\n   * If true, 'previous' and 'next' buttons will show only the icon without text.\n   */\n  minified?: true,\n  /**\n   * The text of the 'previous' button. If minified is true, this prop will not be available.\n   */\n  previousText?: never,\n  /**\n   * The text of the 'next' button. If minified is true, this prop will not be available.\n   */\n  nextText?: never,\n}\n\nexport type PaginationProps = (SquareBorderedPaginationProps | SquareBorderlessPaginationProps | CirclePaginationProps) & (PrevNextPaginationProps | NoPrevNextPaginationProps)\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Pagination.example.tsx",
          "code": "import React from 'react';\nimport Pagination from './Pagination';\n\n// Example of Pagination usage\nconst Example = () => {\n    const [page, setPage] = React.useState(1);\n\n\n    return (\n    <>\n      <Pagination page={page} onChange={(_, page) => setPage(page)} count={3} shape='square' type='separated'/>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "ProgressBar",
    "description": "ProgressBar component indicates the progress of an operation.",
    "docs_path": "src/ProgressBar/ProgressBar.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { ProgressBar } from '@xtreamsrl/react-ui-kit/ProgressBar';"
      },
      "info": [
        {
          "source": "ProgressBar.interface.ts",
          "code": "import {SafeKeyOf} from '../utils'\n\nexport interface ProgressBarType {\n    default: string,\n    separated: string\n}\n\ninterface Progress {\n    0: string,\n    25: string,\n    50: string,\n    75: string,\n    100: string\n}\n\nexport interface ProgressBarProps {\n  /**\n   * The progress value.\n   */\n    progress: SafeKeyOf<Progress>\n  /**\n   * The type of the progress bar: a whole bar or a segmented bar (six segments).\n   */\n    type?: SafeKeyOf<ProgressBarType>\n  /**\n   * If true, the progress bar color is slate. Usually used on a dark background.\n   */\n    inverted?: boolean\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "ProgressBar.example.tsx",
          "code": "import React from 'react';\nimport ProgressBar from './ProgressBar';\nimport {Flex} from \"../Flex\";\n\n// Example of ProgressBar usage\nconst Example = () => {\n\n    return (\n        <>\n            <Flex direction='column' gap='md-4'>\n                <ProgressBar progress={0} />\n                <ProgressBar progress={25} />\n                <ProgressBar progress={50} />\n                <ProgressBar progress={75} />\n                <ProgressBar progress={100} />\n            </Flex>\n            <Flex direction='column' gap='md-4' backgroundColor='grey'>\n                <ProgressBar progress={0} inverted={true}/>\n                <ProgressBar progress={25} inverted={true}/>\n                <ProgressBar progress={50} inverted={true}/>\n                <ProgressBar progress={75} inverted={true}/>\n                <ProgressBar progress={100} inverted={true}/>\n            </Flex>\n\n            <Flex direction='column' gap='md-4'>\n                <ProgressBar type='separated' progress={0} />\n                <ProgressBar type='separated' progress={25} />\n                <ProgressBar type='separated' progress={50} />\n                <ProgressBar type='separated' progress={75} />\n                <ProgressBar type='separated' progress={100} />\n            </Flex>\n            <Flex direction='column' gap='md-4' backgroundColor='grey'>\n                <ProgressBar type='separated' progress={0} inverted={true}/>\n                <ProgressBar type='separated' progress={25} inverted={true}/>\n                <ProgressBar type='separated' progress={50} inverted={true}/>\n                <ProgressBar type='separated' progress={75} inverted={true}/>\n                <ProgressBar type='separated' progress={100} inverted={true}/>\n            </Flex>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Radio",
    "description": "A radio button allows the user to select one option from a set.",
    "docs_path": "src/Radio/Radio.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Radio } from '@xtreamsrl/react-ui-kit/Radio';"
      },
      "info": [
        {
          "source": "Radio.interface.ts",
          "code": "import { SyntheticEvent } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\n\n// Radio states: hovered, pressed, focused, disabled, error\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface RadioState extends Omit<State, 'loading'> {}\nexport interface RadioProps extends RadioState {\n  /**\n   * Callback fired when the state is changed.\n   */\n  onChange?: (event: SyntheticEvent<Element, Event>, checked: boolean) => void;\n  /**\n   * If true, the component is checked.\n   */\n  checked?: boolean;\n  /**\n   * The value of the component.\n   */\n  value?: any;\n  /**\n   * The size of the radio (e.g. 'sm', 'md', 'lg').\n   */\n  size?: SafeKeyOf<Size>;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Radio.example.tsx",
          "code": "import React from 'react';\nimport Radio from './Radio';\n\n// Example of Checkbox usage\nconst Example = () => {\n\n  return (\n    <>\n      <Radio checked disabled />\n      <Radio checked={false} />\n      <Radio checked error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "RadioGroup",
    "description": "RadioGroup component allows to group RadioLabels together.",
    "docs_path": "src/RadioGroup/RadioGroup.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { RadioGroup } from '@xtreamsrl/react-ui-kit/RadioGroup';"
      },
      "info": [
        {
          "source": "RadioGroup.interface.ts",
          "code": "import * as React from 'react';\nimport { FlexProps } from '../Flex';\n\nexport interface RadioGroupProps {\n  /**\n   * The content of the component.\n   */\n  children: React.ReactNode;\n  /**\n   * The default value of the component.\n   */\n  defaultValue?: any;\n  /**\n   * The name attribute of the component.\n   */\n  name?: string;\n  /**\n   * Callback fired when the value changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: string) => void;\n  /**\n   * The value of the component.\n   */\n  value?: any;\n  /**\n   * If true, the RadioLabels will be arranged horizontally.\n   */\n  row?: boolean;\n  /**\n   * The gap between RadioLabels.\n   */\n  gap?: FlexProps['gap'];\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "RadioGroup.example.tsx",
          "code": "import React, { useState } from 'react';\nimport RadioGroup from './RadioGroup';\nimport RadioLabel from '../RadioLabel/RadioLabel';\n\n// Example of RadioGroup usage\nconst Example = () => {\n  const [checked, setChecked] = useState('B');\n\n  return (\n    <>\n      <RadioGroup defaultValue='A' value={checked} onChange={(_, value) => setChecked(value)}>\n        <RadioLabel label='Radio A' value='A' />\n        <RadioLabel label='Radio B' value='B' />\n        <RadioLabel label='Radio C' value='C' />\n      </RadioGroup>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "RadioLabel",
    "description": "RadioLabel is a React component representing a labelled radio button.",
    "docs_path": "src/RadioLabel/RadioLabel.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { RadioLabel } from '@xtreamsrl/react-ui-kit/RadioLabel';"
      },
      "info": [
        {
          "source": "RadioLabel.interface.ts",
          "code": "import { RadioProps } from '../Radio';\n\nexport interface RadioLabelProps extends Omit<RadioProps, 'onChange' | 'value'> {\n  value: any\n  label: string;\n  /**\n   * Additional caption or description for the radio button.\n   */\n  caption?: string;\n  inputRef?: React.Ref<any>\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "RadioLabel.example.tsx",
          "code": "import React from 'react';\nimport RadioLabel from './RadioLabel';\n\n// Example of RadioLabel usage\nconst Example = () => {\n\n  return (\n    <>\n      <RadioLabel label='Terms and Conditions' checked disabled  value=\"A\"/>\n      <RadioLabel label='To-do' checked={false} caption='To-do caption' value=\"A\"/>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Rate",
    "description": "Rate is a component that allows users to rate something. The evaluation can be done with stars or hearts.",
    "docs_path": "src/Rate/Rate.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Rate } from '@xtreamsrl/react-ui-kit/Rate';"
      },
      "info": [
        {
          "source": "Rate.interface.ts",
          "code": "import { SafeKeyOf } from '../utils';\nimport * as React from 'react';\n\nexport interface RateType {\n  star: string;\n  heart: string;\n}\n\nexport interface RateSize {\n  xs: true;\n  sm: true;\n  md: true;\n  lg: true;\n  xl: true;\n  xxl: true;\n  xxxl: true;\n}\n\nexport interface EmptyStyle {\n  filled: string;\n  outline: string;\n}\n\nexport interface RateProps {\n  /**\n   * The value of the rating.\n   */\n  onChange: (event: React.SyntheticEvent, value: number | null) => void;\n  /**\n   * The type of the rating. It can be 'star' or 'heart'. Default is 'star'.\n   */\n  type?: SafeKeyOf<RateType>;\n  /**\n   * The size of the rating (e.g., 'xs', 'sm', 'md', 'lg', 'xl', 'xxl', 'xxxl').\n   */\n  size?: SafeKeyOf<RateSize>;\n  /**\n   * The style of the empty rating. It can be 'outline' or 'filled'. Default is 'outline'.\n   */\n  emptyStyle?: SafeKeyOf<EmptyStyle>;\n  /**\n   * The precision of the rating. Default is 0.5.\n   */\n  precision?: number;\n  /**\n   * The value of the rating.\n   */\n  defaultValue?: number;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Rate.example.tsx",
          "code": "import React from 'react';\nimport Rate from './Rate';\nimport {Flex} from \"../Flex\";\n\n// Example of RateAndFeedback usage\nconst Example = () => {\n\n    return (\n        <>\n          <Flex gap='md-4'>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='star' emptyStyle={'filled'} size={'xs'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'sm'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'md'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'xl'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'xxl'} onChange={() => console.log(\"third\")}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'xxxl'} onChange={() => console.log(\"fourth\")}></Rate>\n            </Flex>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='heart' emptyStyle={'filled'} size={'xs'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'sm'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'md'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'xl'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'xxl'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'xxxl'} onChange={() => {}}></Rate>\n            </Flex>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='star' size={'xs'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' size={'sm'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' size={'md'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' size={'xl'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' size={'xxl'} onChange={() => console.log(\"third\")}></Rate>\n              <Rate type='star' size={'xxxl'} onChange={() => console.log(\"fourth\")}></Rate>\n            </Flex>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='heart' emptyStyle={'outline'} size={'xs'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'sm'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'md'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'xl'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'xxl'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'xxxl'} defaultValue={3.5} onChange={() => {}}></Rate>\n            </Flex>\n          </Flex>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Select",
    "description": "Select is a component that allows users pick an option from a list of options.",
    "docs_path": "src/Select/Select.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Select } from '@xtreamsrl/react-ui-kit/Select';"
      },
      "info": [
        {
          "source": "Select.interface.ts",
          "code": "/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { TextLabelInputProps, CustomLabelInputProps } from '../TextInput';\n\nexport interface TextLabelSelectProps extends TextLabelInputProps {}\nexport interface CustomLabelSelectProps extends CustomLabelInputProps {}\n\nexport type SelectProps = TextLabelSelectProps | CustomLabelSelectProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Select.example.tsx",
          "code": "import React, { useState } from 'react';\nimport Select from './Select';\n\n// Example of Select usage\nconst Example = () => {\n  const [age, setAge] = useState<string | number | undefined>('');\n\n  return (\n    <>\n      <Select value={age} onChange={(e) => setAge(e.target.value as any)} label='Label' name='select'>\n        <Select.Option value={10}>Ten</Select.Option>\n        <Select.Option value={20}>Twenty</Select.Option>\n        <Select.Option value={30}>Thirty</Select.Option>\n      </Select>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "SelectBasic",
    "description": "Basic input select with no label nor hint",
    "docs_path": "src/SelectBasic/SelectBasic.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { SelectBasic } from '@xtreamsrl/react-ui-kit/SelectBasic';"
      },
      "info": [
        {
          "source": "SelectBasic.interface.ts",
          "code": "import { SelectProps } from '../Select'\n\nexport type SelectBasicProps = Omit<SelectProps, 'label' | 'labelProps'>;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "SelectBasic.example.tsx",
          "code": "import React, { useState } from 'react';\nimport SelectBasic from \"./SelectBasic\";\n\n// Example of Select usage\nconst Example = () => {\n  const [age, setAge] = useState< number >(10);\n\n  return (\n    <>\n      <SelectBasic value={age} onChange={(e) => setAge(e.target.value as any)} name='select'>\n        <SelectBasic.Option value={10}>Ten</SelectBasic.Option>\n        <SelectBasic.Option value={20}>Twenty</SelectBasic.Option>\n        <SelectBasic.Option value={30}>Thirty</SelectBasic.Option>\n      </SelectBasic>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "SidePanel",
    "description": "SidePanel is a component that displays content from the edge of the screen.",
    "docs_path": "src/SidePanel/SidePanel.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { SidePanel } from '@xtreamsrl/react-ui-kit/SidePanel';"
      },
      "info": [
        {
          "source": "Action.interface.ts",
          "code": "import { MouseEventHandler } from 'react';\n\nexport interface ActionProps {\n  /**\n   * The content of the component: the text of the button.\n   */\n  children: string,\n  /**\n   * Callback function called when the button is clicked.\n   */\n  onClick: MouseEventHandler<HTMLButtonElement>\n}\n"
        },
        {
          "source": "Footer.interface.ts",
          "code": "import React from 'react';\nimport {SafeKeyOf} from \"../../utils\";\n\nexport interface SidePanelFooterType {\n    right: string;\n    left: string;\n    fullwidth: string;\n}\n\nexport interface SidePanelFooterProps {\n  /**\n   * Whether to display a divider to separate the Content from the Footer.\n   */\n    divider?: boolean\n  /**\n   * SidePanel.PrimaryAction and SidePanel.SecondaryAction are allowed as children.\n   */\n    children: React.ReactNode\n  /**\n   * The type of the Footer (e.g, 'right', 'left' or 'fullwidth'). 'fullwidth' will make the Footer span the entire width of the SidePanel.\n   */\n    type: SafeKeyOf<SidePanelFooterType>;\n}\n"
        },
        {
          "source": "Header.interface.ts",
          "code": "import {ReactNode} from \"react\";\n\nexport interface SidePanelHeaderProps {\n  /**\n   * The title of the SidePanel.\n   */\n    title: string\n  /**\n   * Other components to be rendered in the header.\n   */\n    children?: ReactNode;\n}\n"
        },
        {
          "source": "SidePanel.interface.ts",
          "code": "import React, {MouseEventHandler} from \"react\";\nimport {SafeKeyOf} from \"../utils\";\n\ninterface SidePanelAnchor {\n    bottom: true\n    left: true\n    right: true\n    top: true\n}\n\nexport interface SidePanelProps {\n  /**\n   * Where the SidePanel should be displayed (e.g., 'left', 'right', 'top', 'bottom')\n   */\n    anchor?: SafeKeyOf<SidePanelAnchor>\n  /**\n   * Whether the SidePanel is open or not\n   */\n    open?: boolean;\n  /**\n   * Callback fired when the component requests to be closed\n   */\n  onClose?: MouseEventHandler<HTMLButtonElement>\n  /**\n   * SidePanel.Header, SidePanel.Content, SidePanel.Footer are allowed as children. SidePanel.Content is required.\n   */\n    children: React.ReactNode\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "SidePanel.example.tsx",
          "code": "import React, {useState} from 'react';\nimport SidePanel from './SidePanel';\nimport TextInput from \"../TextInput/TextInput\";\n\n// Example of SidePanel usage\nconst Example = () => {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <>\n            {/* Not specifying the onClose function the close button will not show up */}\n            <SidePanel anchor={\"right\"} open={open} onClose={() => setOpen(false)}>\n                <SidePanel.Header title=\"Title\"/>\n\n                <SidePanel.Content>\n                    <TextInput label={\"Name\"} name={\"name\"}/>\n                    <TextInput label={\"Surname\"} name={\"surname\"}/>\n                    <TextInput label={\"Address\"} name={\"address\"}/>\n                    <TextInput label={\"City\"} name={\"city\"}/>\n                    <TextInput label={\"Country\"} name={\"country\"}/>\n                    <TextInput label={\"Postal code\"} name={\"postalCode\"}/>\n\n                    This is just text to see how it is displayed, ok really well\n                    So if i write a lot the size of this panel becomes enormous\n                </SidePanel.Content>\n\n                <SidePanel.Footer type='left'>\n                    <SidePanel.PrimaryAction onClick={() => console.log('click')}>\n                        Primary Action\n                    </SidePanel.PrimaryAction>\n                    <SidePanel.SecondaryAction onClick={() => console.log('click')}>\n                        Secondary Action\n                    </SidePanel.SecondaryAction>\n                </SidePanel.Footer>\n            </SidePanel>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Slider",
    "description": "Slider is a component that allows users to set a value by moving a slider thumb between min and max values.",
    "docs_path": "src/Slider/Slider.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Slider } from '@xtreamsrl/react-ui-kit/Slider';"
      },
      "info": [
        {
          "source": "Slider.interface.ts",
          "code": "import { SafeKeyOf } from '../utils'\nimport {LabelProps} from \"../TextInput/InputLabel\";\nimport {ReactNode} from \"react\";\n\nexport interface TickMarkType {\n  onlyMarks: string,\n  percentage: string,\n  dollars: string,\n  everyTenUnits: string\n}\n\ninterface BaseSliderProps {\n  /**\n   * Name attribute of the input element.\n   */\n  name: string\n  /**\n   * If true, the slider will be disabled.\n   */\n  disabled?: boolean\n  /**\n   * The tick mark type. It can be 'percentage', 'dollars', 'everyTenUnits' or undefined. If undefined, no tick marks will be displayed.\n   */\n  tickMark?: SafeKeyOf<TickMarkType>\n  /**\n   * The granularity with which the slider can step through values.\n   */\n  step?: number\n  /**\n   * The minimum allowed value of the slider.\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider.\n   */\n  max?: number\n}\n\ninterface SimpleSliderProps extends BaseSliderProps {\n  /**\n   * The type of the slider. It can be 'slider' or 'range'.\n   */\n  type: 'slider'\n  /**\n   * The value of the slider. When the slider type is set to 'range' provide an array with two values. Otherwise, provide a number.\n   */\n  value: number\n  /**\n   * Callback fired when the value changes. It receives the value as a number when the slider type is set to 'slider' or an array of two numbers when the slider type is set to 'range'.\n   */\n  onChange: (value: number) => void\n}\n\ninterface RangeProps extends BaseSliderProps {\n  /**\n   * The type of the slider. It can be 'slider' or 'range'.\n   */\n  type: 'range';\n  /**\n   * The value of the slider. When the slider type is set to 'range' provide an array with two values. Otherwise, provide a number.\n   */\n  value: [number, number];\n  /**\n   * Callback fired when the value changes. It receives the value as a number when the slider type is set to 'slider' or an array of two numbers when the slider type is set to 'range'.\n   */\n  onChange: (value: [number, number]) => void\n}\n\nexport interface TextLabelProps{\n  label: string;\n  labelProps?: Omit<LabelProps, 'children'>;\n}\n\nexport interface CustomLabelProps{\n  label: ReactNode;\n  labelProps?: undefined;\n}\n\nexport type SliderProps = (RangeProps | SimpleSliderProps) & (TextLabelProps | CustomLabelProps)\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Slider.example.tsx",
          "code": "import React, {useState} from 'react';\nimport Slider from './Slider';\n\n// Example of Slider usage\nconst Example = () => {\n  const [slider, setSlider] = useState<number>(0);\n  const [range, setRange] = useState<[number, number]>([1, 2]);\n\n  return (\n    <>\n      <Slider type='range' name='range' label='Range' labelProps={{size: 'sm', required: true}} tickMark='percentage' value={range} onChange={(value) => setRange(value)}/>\n      <Slider type='slider' name='slider' label='SliderDollars' tickMark='dollars' min={100} max={10000} value={slider} onChange={(value) => setSlider(value)}/>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Spinner",
    "description": "Spinner is a component that indicates the loading state of a page or a section.\nIt is used when the user needs to wait for an action to complete.",
    "docs_path": "src/Spinner/Spinner.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Spinner } from '@xtreamsrl/react-ui-kit/Spinner';"
      },
      "info": [
        {
          "source": "Spinner.interface.ts",
          "code": "import {SafeKeyOf} from '../utils'\n\ninterface SpinnerSize {\n    12: true,\n    14: true,\n    16: true,\n    20: true,\n    24: true,\n    28: true,\n    32: true\n}\n\nexport interface SpinnerProps {\n  /**\n   * The size of the spinner in pixels (e.g. 12, 14 16, 20, 24, 28, 32).\n   */\n    size?: SafeKeyOf<SpinnerSize>\n  /**\n   * If true, the spinner color will be inverted (light spinner on dark background).\n   */\n    inverted?: boolean\n  /**\n   * The state of the spinner. Can be 'indeterminate' (animates continually without regard to progress) or 'determinate' (displays exactly how much progress has been made).\n   */\n    state?: 'determinate' | 'indeterminate'\n  /**\n   * The value of the progress indicator for the determinate variant.\n   */\n    value?: number\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Spinner.example.tsx",
          "code": "import React from 'react';\nimport Spinner from './Spinner';\nimport {Flex} from \"../Flex\";\n\n// Example of Spinner usage\nconst Example = () => {\n\n    return (\n        <>\n            <Flex gap='md-5'>\n                <Flex direction='column' gap='sm-6'>\n                    <Spinner size={12}/>\n                    <Spinner size={14}/>\n                    <Spinner size={16}/>\n                    <Spinner size={20}/>\n                    <Spinner size={24}/>\n                    <Spinner size={28}/>\n                    <Spinner size={32}/>\n                </Flex>\n                <Flex direction='column' gap='sm-6'>\n                    <Spinner size={12} state='determinate' value={25}/>\n                    <Spinner size={14} state='determinate' value={25}/>\n                    <Spinner size={16} state='determinate' value={25}/>\n                    <Spinner size={20} state='determinate' value={25}/>\n                    <Spinner size={24} state='determinate' value={25}/>\n                    <Spinner size={28} state='determinate' value={25}/>\n                    <Spinner size={32} state='determinate' value={25}/>\n                </Flex>\n                <Flex direction='column' gap='sm-6' backgroundColor='grey'>\n                    <Spinner inverted size={12}/>\n                    <Spinner inverted size={14}/>\n                    <Spinner inverted size={16}/>\n                    <Spinner inverted size={20}/>\n                    <Spinner inverted size={24}/>\n                    <Spinner inverted size={28}/>\n                    <Spinner inverted size={32}/>\n                </Flex>\n                <Flex direction='column' gap='sm-6' backgroundColor='grey'>\n                    <Spinner size={12} inverted state='determinate' value={25}/>\n                    <Spinner size={14} inverted state='determinate' value={25}/>\n                    <Spinner size={16} inverted state='determinate' value={25}/>\n                    <Spinner size={20} inverted state='determinate' value={25}/>\n                    <Spinner size={24} inverted state='determinate' value={25}/>\n                    <Spinner size={28} inverted state='determinate' value={25}/>\n                    <Spinner size={32} inverted state='determinate' value={25}/>\n                </Flex>\n            </Flex>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Step",
    "description": "Step is a component used to display a single step of a stepper. It is used as a direct child of Stepper.",
    "docs_path": "src/Step/Step.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Step } from '@xtreamsrl/react-ui-kit/Step';"
      },
      "info": [
        {
          "source": "Step.interface.ts",
          "code": "import { State } from \"../utils\";\nimport {StepIcon} from \"./StepIcon\";\n\nexport interface StepProps extends Pick<State, 'error'> {\n  /**\n   * The label of the step.\n   */\n  label: string;\n  /**\n   * The caption of the step.\n   */\n  caption?: string;\n  /**\n   * Custom icon for the step.\n   */\n  StepIconComponent?: typeof StepIcon;\n}\n"
        },
        {
          "source": "StepIcon.interface.ts",
          "code": "\nexport interface StepIconProps {\n  /**\n   * If true, the step is active.\n   */\n  active?: boolean;\n  /**\n   * If true, the step is completed.\n   */\n  completed?: boolean;\n  /**\n   * If true, the step is in error.\n   */\n  error?: boolean;\n  /**\n   * The text of the step\n   */\n  icon?: string;\n}\n"
        },
        {
          "source": "StepLabel.interface.ts",
          "code": "import { StepIcon } from \"../StepIcon\";\n\nexport interface StepLabelProps {\n  /**\n   * The content of the StepLabel.\n   */\n  caption?: string;\n  /**\n   * Additional caption or description for the step.\n   */\n  StepIconComponent?: typeof StepIcon;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Step.example.tsx",
          "code": "import React from 'react';\nimport Step from \"./Step\";\n\n// Example of Step usage\nconst Example = () => {\n\n  return (\n    <>\n      <Step label='Compile' />\n      <Step label=\"Review\" caption='description' />\n      <Step label=\"Feedback\" caption='description' error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Stepper",
    "description": "Stepper is a component to display progress through a sequence of logical and numbered steps.",
    "docs_path": "src/Stepper/Stepper.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Stepper } from '@xtreamsrl/react-ui-kit/Stepper';"
      },
      "info": [
        {
          "source": "Stepper.interface.ts",
          "code": "import React from 'react';\nimport {DimensionsProps} from \"../utils\";\n\nexport interface StepperProps extends DimensionsProps {\n  /**\n   * The steps of the Stepper. Step components are the only valid children of Stepper.\n   */\n  children: React.ReactNode;\n  /**\n   * The active step index. If not set, the Stepper will be uncontrolled.\n   */\n  activeStep: number;\n  /**\n   * The stepper orientation ('horizontal' or 'vertical').\n   */\n  orientation?: 'horizontal' | 'vertical';\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Stepper.example.tsx",
          "code": "import React, { useState } from 'react';\nimport Stepper from \"./Stepper\";\nimport Step from \"../Step/Step\";\nimport Button from \"../Button/Button\";\nimport Flex from \"../Flex/Flex\";\n\n\n// Example of Stepper usage\nconst Example = () => {\n  const steps = ['Select', 'Create', 'Review', 'Confirm'];\n  const [step, setStep] = useState(2);\n\n  return (\n    <>\n      <Stepper activeStep={step}>\n        {steps.map((label) => (\n          <Step key={label} label={label} />\n        ))}\n      </Stepper>\n      <Flex>\n        <Button onClick={() => setStep(prev => prev - 1)}>Back</Button>\n        <Button onClick={() => setStep(prev => prev + 1)}>Next</Button>\n      </Flex>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Switch",
    "description": "Switch is a visual toggle between two mutually exclusive states — on and off.",
    "docs_path": "src/Switch/Switch.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Switch } from '@xtreamsrl/react-ui-kit/Switch';"
      },
      "info": [
        {
          "source": "Switch.interface.ts",
          "code": "import React, { SyntheticEvent } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\n\nexport interface SwitchProps extends State {\n  /**\n   * The name of the input.\n   */\n  name?: string\n  /**\n   * Callback fired when the state is changed.\n   */\n  onChange?: (event: SyntheticEvent<Element, Event>, checked: boolean) => void\n  /**\n   * If true, the component is checked.\n   */\n  checked?: boolean;\n  /**\n   * The size of the switch (e.g., 'sm' or 'md').\n   */\n  size?: SafeKeyOf<Omit<Size, 'lg'>>;\n  /**\n   * If true, the Switch behaves as a checkbox element.\n   * Its indeterminate state is used only for visual representation and, in this way, the Switch remains either in its checked or unchecked state.\n   */\n  indeterminate?: boolean;\n  /**\n   * AA ref that is used to get the switch's input element.\n   */\n  inputRef?: React.Ref<any>\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Switch.example.tsx",
          "code": "import React from 'react';\nimport Switch from './Switch';\n\n// Example of Switch usage\nconst Example = () => {\n\n  return (\n    <>\n      <Switch />\n      <Switch checked />\n      <Switch checked loading />\n      <Switch checked disabled />\n      <Switch checked indeterminate />\n      <Switch checked loading error />\n    </>\n\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "SwitchLabel",
    "description": "SwitchLabel is a React component representing a labeled Switch component.\nIt is a visual toggle between two mutually exclusive states — on and off.",
    "docs_path": "src/SwitchLabel/SwitchLabel.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { SwitchLabel } from '@xtreamsrl/react-ui-kit/SwitchLabel';"
      },
      "info": [
        {
          "source": "SwitchLabel.interface.ts",
          "code": "import { SwitchProps } from '../Switch';\n\nexport interface SwitchLabelProps extends Omit<SwitchProps, 'onChange'> {\n  /**\n   * The label of the switch.\n   */\n  label: string;\n  /**\n   *  The additional caption or description of the switch.\n   */\n  caption?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "SwitchLabel.example.tsx",
          "code": "import React from 'react';\nimport SwitchLabel from './SwitchLabel';\n\n// Example of SwitchLabel usage\nconst Example = () => {\n\n  return (\n    <>\n      <SwitchLabel label='Terms and Conditions' checked disabled />\n      <SwitchLabel label='To-do' checked={false} caption='To-do caption' />\n      <SwitchLabel label='To-do' caption='To-do caption' indeterminate />\n      <SwitchLabel label='To-do' caption='To-do caption' loading />\n      <SwitchLabel label='To-do' caption='To-do caption' error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Table",
    "description": "Table is a component that renders a table with virtualized rows.",
    "docs_path": "src/Table/Table.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Table } from '@xtreamsrl/react-ui-kit/Table';"
      },
      "info": [
        {
          "source": "Table.interface.ts",
          "code": "import React from 'react';\nimport { Row, SortingRule } from 'react-table';\nimport TableRow from '@mui/material/TableRow';\nimport { ColumnsDefinition } from './types';\n\nexport interface TableProps<T extends object> {\n  /**\n   * An array of objects that will be rendered as rows.\n   */\n  data: T[];\n  /**\n   * An array of objects that defines the columns of the table.\n   */\n  columnsDefinition: ColumnsDefinition<T>;\n  /**\n   * A React node that will be rendered when there are no items to show.\n   */\n  noItemsPlaceholder: React.ReactNode;\n  /**\n   * A function that receives a row and returns a string that will be used as the key of the row.\n   */\n  keyExtractor: (data: T) => string | number;\n  /**\n   * The test id of the table.\n   */\n  listTestId?: string;\n  /**\n   * The number of items that will be rendered before the scroll is activated.\n   */\n  itemsToShowBeforeScroll?: number;\n  /**\n   * A boolean that indicates if the table is loading. If it is true, a loading bar will be rendered.\n   */\n  loading?: boolean;\n  /**\n   * An object that contains the following properties:\n   */\n  infiniteLoader?: {\n    /**\n     * A function that receives an index and returns a boolean that indicates if the item is loaded.\n     */\n    isItemLoaded: (index: number) => boolean;\n    /**\n     * A function that will be called when the user scrolls to the bottom of the table.\n     */\n    loadMoreItems: (startIndex: number, stopIndex: number) => void;\n    /**\n     * The number of items that will be rendered before the loadMoreItems function is called.\n     */\n    threshold?: number;\n  };\n  /**\n   * A boolean that indicates if the sorting is done in the server side.\n   */\n  serverSideSorting?: boolean;\n  /**\n   * An array of objects that defines the initial sorting of the table.\n   */\n  initialSort?: {\n    /**\n     * The id of the column.\n     */\n    id: string;\n    /**\n     * A boolean that indicates if the sorting is descending.\n     */\n    desc: boolean;\n  }[];\n  /**\n   * A function that will be called when the sorting strategy changes.\n   */\n  onSortChange?: (sorting: SortingRule<T>[]) => void;\n  /**\n   * A React node that will be rendered instead of the default header.\n   */\n  customHeaderContent?: React.JSXElementConstructor<any> | undefined;\n  /**\n   * A function that receives a row and returns a string that will be used as the test id of the row.\n   */\n  rowTestIdBuilder?: (data: T) => string;\n/**\n   * The height of the rows.\n   */\n  rowHeight?: number;\n  /**\n   * An object that will be spread into the rows of the table to override (some of) their props.\n   */\n  rowPropsOverride?: Partial<React.ComponentProps<typeof TableRow>>;\n  /**\n   * A function that will be called when the user clicks on a row.\n   */\n  onRowClick?: (data: T, index: number) => void;\n  /**\n   * A function that will be called when the user selects a row.\n   */\n  onRowsSelected?: (selectedRows: Row<T>[]) => void;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Table.example.tsx",
          "code": "import React, { useMemo } from 'react';\nimport Table from './Table';\nimport { ColumnsDefinition } from './types';\nimport { Typography } from '../Typography';\nimport { Dropmenu, useDropmenu } from '../Dropmenu';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\n\ntype Data = { user: string; nickname: string; email: string };\nexport const columnsDefinition: (tr: any) => ColumnsDefinition<Data> = ({ translate, dateTimeFormat }) => ([\n  {\n    accessor: 'user',\n    Header: () => 'User',\n    Cell: ({ rowData }) => {\n      const { user, nickname } = rowData;\n\n      return (\n        <>\n          <Typography variant='body/sm/regular'>{user}</Typography>\n          <Typography variant='body/xs/regular' color=\"grey.11\">\n            {nickname}\n          </Typography>\n        </>\n      );\n    },\n    align: 'start',\n    sortable: true,\n  },\n  {\n    accessor: 'email',\n    Header: () => 'Email',\n    Cell: ({ rowData }) => rowData.email,\n    align: 'start',\n  },\n  {\n    id: 'actions',\n    accessor: () => null,\n    Header: () => '',\n    Cell: ({ rowData }) => {\n      const { anchorEl, isOpen, openDropmenu, closeDropmenu } = useDropmenu();\n\n      return (\n        <div>\n          <Button onClick={openDropmenu} size='sm' variant='outlined' color='grey' icon={<Icon name='MoreVertical' />} onlyIcon />\n\n          <Dropmenu open={isOpen} anchorEl={anchorEl} onClose={closeDropmenu}>\n            <Dropmenu.Header>Header</Dropmenu.Header>\n            <Dropmenu.Item onClick={() => ''} size='sm' startAddOn={<Icon name='Home' />} endAddOn='AAAA' value={10}>Ten</Dropmenu.Item>\n            <Dropmenu.Item onClick={() => ''} size='sm' value={20}>Twenty</Dropmenu.Item>\n            <Dropmenu.Item disabled onClick={() => ''} size='sm' value={30}>Thirty</Dropmenu.Item>\n            <Dropmenu.Footer>Footer</Dropmenu.Footer>\n          </Dropmenu>\n        </div>\n      )\n    },\n    align: 'end',\n  },\n]);\n\n\n// Example of Table usage\nconst Example = () => {\n  // const t = useTranslate();\n  // const d = useDateTimeFormat();\n\n  // NOTE: columns definition always has to be stable\n  const cols = useMemo(() => {\n    return columnsDefinition({ translate: () => '', dateTimeFormat: () => '' });\n    // TODO: include t and d translation funcs in deps array\n  }, []);\n\n  return (\n    <>\n      <Table\n        columnsDefinition={cols}\n        data={[\n          { user: 'John Doe', nickname: '@John', email: 'john.doe@gmail.com' },\n          { user: 'Jane Doe', nickname: '@Jane', email: 'jane.doe@gmail.com' },\n        ]}\n        keyExtractor={c => c.user}\n        loading={false}\n        onRowClick={() => 'click'}\n        itemsToShowBeforeScroll={8}\n        initialSort={[{ id: 'user', desc: true }]}\n        noItemsPlaceholder='No users'\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Tabs",
    "description": "Tabs is a component that displays a group of tabs.",
    "docs_path": "src/Tabs/Tabs.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Tabs } from '@xtreamsrl/react-ui-kit/Tabs';"
      },
      "info": [
        {
          "source": "Tab.interface.ts",
          "code": "import { ReactElement, ReactNode } from 'react';\n\nexport interface TabProps {\n  /**\n   * The textual label of the tab.\n   */\n  children: string;\n  /**\n   * The icon to show on the tab.\n   */\n  icon?: ReactElement;\n  /**\n   * The badge to show on the tab.\n   */\n  badge?: ReactNode;\n  /**\n   * The value to associate with the tab.\n   */\n  value: any;\n}\n"
        },
        {
          "source": "Tabs.interface.ts",
          "code": "import * as React from 'react';\nimport { SafeKeyOf, Size } from '../utils';\n\nexport interface TabsOrientation {\n  horizontal: true;\n  vertical: true;\n}\n\nexport interface TabsProps<T> {\n  /**\n   * The content of Tabs. They can be Tabs.Tab or Tabs.Panel.\n   */\n  children?: React.ReactNode;\n  /**\n   * The current tab, it accepts any type of value, generally it is the index of the tab.\n   */\n  currentTab: T;\n  /**\n   * The size of the tabs (e.g., 'sm', 'md', 'lg').\n   */\n  size?: SafeKeyOf<Size>;\n  /**\n   * If true, the tabs will grow to use all the available space.\n   */\n  fullWidth?: boolean;\n  /**\n   * The orientation of the tabs (e.g., 'horizontal', 'vertical').\n   */\n  orientation?: SafeKeyOf<TabsOrientation>;\n  /**\n   * The callback function that is triggered when the tab changes.\n   */\n  onChange?: (event: React.SyntheticEvent, currentTab: T) => void;\n  /**\n   * The identifying test ID used for testing purposes.\n   */\n  testId?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Tabs.example.tsx",
          "code": "import React, { useState } from 'react';\nimport { Icon } from '../Icon';\nimport Tabs from './Tabs';\n\n// Example of Tabs usage\nconst Example = () => {\n  const [currentTab, setCurrentTab] = useState(0);\n\n  return (\n    <>\n      <Tabs size='sm' currentTab={currentTab} fullWidth onChange={(_, t) => setCurrentTab(t)}>\n        <Tabs.Tab icon={<Icon name='Home' />} value={0}>Home</Tabs.Tab>\n        <Tabs.Tab value={1}>Profile</Tabs.Tab>\n        <Tabs.Tab value={2}>Settings</Tabs.Tab>\n      </Tabs>\n\n      <Tabs orientation='vertical' size='sm' currentTab={currentTab} onChange={(e, t) => setCurrentTab(t)}>\n        <Tabs.Tab icon={<Icon name='Home' />} value={0}>Home</Tabs.Tab>\n        <Tabs.Tab value={1}>Profile</Tabs.Tab>\n        <Tabs.Tab value={2}>Settings</Tabs.Tab>\n      </Tabs>\n\n      {[0, 1, 2].map((index) => {\n        return (\n          <Tabs.Panel index={index} currentTab={currentTab}>\n            {`Tab Content: ${index}`}\n          </Tabs.Panel>\n        )\n      })}\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Tag",
    "description": "Tag is a component that displays a tag. It can be used to display a label, a category, or a status.",
    "docs_path": "src/Tag/Tag.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Tag } from '@xtreamsrl/react-ui-kit/Tag';"
      },
      "info": [
        {
          "source": "Tag.interface.ts",
          "code": "import { SafeKeyOf, Size } from '../utils';\nimport { MouseEventHandler, ReactElement } from 'react';\n\ntype TagSize = SafeKeyOf<Size>;\n\nexport interface TagVariant {\n  contained: true;\n  outlined: true;\n  tinted: true;\n  text: true;\n}\n\nexport interface TagProps {\n  /**\n   * The text to display inside the tag.\n   */\n  text: string;\n  /**\n   * The callback function that is triggered when the tag is clicked.\n   */\n  onClick?: MouseEventHandler<HTMLDivElement>;\n  /**\n   * The callback function that is triggered when the tag is deleted.\n   */\n  onDelete?: MouseEventHandler<HTMLDivElement>;\n  /**\n   * The identifying test ID used for testing purposes.\n   */\n  testId?: string;\n  /**\n   * The variant to use (e.g., 'tined', 'contained', 'outlined', 'text').\n   */\n  variant?: SafeKeyOf<TagVariant>;\n  /**\n   * The size of the tag (e.g., 'sm', 'md', 'lg').\n   */\n  size?: TagSize;\n  /**\n   * The icon to display inside the tag.\n   */\n  icon?: ReactElement;\n  /**\n   * If true, the tag will be checked.\n   */\n  checked?: boolean;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Tag.example.tsx",
          "code": "import React from 'react';\nimport Tag from './Tag';\n\n// Example of Tag usage\nconst Example = () => {\n  return (\n    <>\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid1\"\n      />\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid2\"\n        checked\n      />\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid3\"\n        size=\"md\"\n        variant=\"outlined\"\n      />\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid4\"\n        size=\"sm\"\n        variant=\"text\"\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "TextInput",
    "description": "TextInput is a component used to get user input in a text field.",
    "docs_path": "src/TextInput/TextInput.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { TextInput } from '@xtreamsrl/react-ui-kit/TextInput';"
      },
      "info": [
        {
          "source": "InputAddOn.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf, Size } from '../../utils';\n\nexport interface InputAddOnBaseProps {\n  /**\n   * The size of the input add-on (e.g., 'sm', 'md', 'lg').\n   */\n  size?: SafeKeyOf<Size>;\n}\n\nexport interface TextAddOnProps extends InputAddOnBaseProps {\n  /**\n   *  A string or an icon to be displayed inside the input.\n   */\n  children: string;\n}\n\nexport interface IconAddOnProps extends InputAddOnBaseProps {\n  /**\n   *  A string or an icon to be displayed inside the input.\n   */\n  children: ReactNode;\n}\n\n// TODO: handle other AddOn types\nexport type InputAddOnProps = TextAddOnProps | IconAddOnProps;\n"
        },
        {
          "source": "InputLabel.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf, Size } from '../../utils';\n\nexport interface LabelProps {\n  /**\n   * The textual label of the input.\n   */\n  children: string;\n  /**\n   * The id of the input that the label is associated with.\n   */\n  htmlFor?: string;\n  /**\n   * The size of the input label (e.g., 'sm', 'md').\n   */\n  size?: Exclude<SafeKeyOf<Size>,'lg'>;\n  /**\n   * The description of the input.\n   */\n  description?: string;\n  /**\n   * An icon to be displayed next to the label.\n   */\n  icon?: ReactNode;\n  /**\n   * If true, the label will be required.\n   */\n  required?: boolean;\n}\n"
        },
        {
          "source": "TextInput.interface.ts",
          "code": "/* eslint-disable @typescript-eslint/no-empty-interface */\nimport React, { ReactNode, HTMLInputTypeAttribute, ReactElement, ChangeEventHandler, MouseEventHandler } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\nimport { LabelProps } from './InputLabel/InputLabel.interface';\n\ntype TextInputPropsSize = SafeKeyOf<Size>;\n\nexport interface HintProps {\n  /**\n   * The size of the hint (e.g., 'sm', 'md').\n   */\n  size?: Exclude<TextInputPropsSize , 'lg'>;\n}\n\ninterface TextInputLabelProps {\n  /**\n   * The label of the input. It can be a string or a React node.\n   */\n  label?: string | ReactNode;\n  /**\n   * Props applied to the label element. It is available only when label is a string.\n   */\n  labelProps?: Omit<LabelProps, 'children' | 'required'>;\n}\n\ninterface TextInputHintProps {\n  /**\n   * The hint text of the input.\n   */\n  hint?: string;\n  /**\n   * Props applied to the hint element. The only field contained by this prop is 'size'.\n   */\n  hintProps?: HintProps;\n}\n\nexport interface TextInputVariant {\n  outlined: true;\n  standard: true;\n  filled: true;\n}\n\n// TextInput states: hovered, pressed, focused, disabled, error\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TextInputState extends Omit<State, 'loading' | 'pressed'> {}\n\n\nexport interface SelectInputProps {\n  /**\n   * If true, the input will be a select input.\n   */\n  select?: boolean;\n  /**\n   * Callback function that is called when the use selects an option.\n   */\n  onSelect?:  React.ReactEventHandler<HTMLDivElement>;\n  children?: ReactNode;\n}\n\nexport interface BaseTextInputProps extends TextInputState, TextInputLabelProps, TextInputHintProps, SelectInputProps {\n  /**\n   * CSS class that will be applied to the input for custom styling.\n   */\n  className?: string;\n  /**\n   * If true, the input will be read-only.\n   */\n  readonly?: boolean;\n  /**\n   * A test identifier used for testing purposes.\n   */\n  testId?: string;\n  /**\n   * The name of the input. It is used to reference form data after a form is submitted.\n   */\n  name: string;\n  /**\n   * Callback function that is called when the value of the input changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  /**\n   * Callback function that is called when the input is clicked.\n   */\n  onClick?: MouseEventHandler<HTMLDivElement>;\n  /**\n   * The type of the input (e.g. 'text', 'number', 'email', etc).\n   */\n  type?: HTMLInputTypeAttribute;\n  /**\n   * The variant of the input (e.g. 'filled', 'outlined', 'standard').\n   */\n  variant?: SafeKeyOf<TextInputVariant>;\n  /**\n   * Callback function that is called when the input loses focus.\n   */\n  onBlur?: () => void;\n  /**\n   * A ref that is used to get the input's input element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * The size of the input component (e.g., 'sm', 'md', 'lg').\n   */\n  size?: TextInputPropsSize;\n  /**\n   * The value of the input.\n   */\n  value?: unknown;\n  /**\n   * If true, the input will be required.\n   */\n  required?: boolean;\n  /**\n   * If true, the input will be disabled.\n   */\n  multiline?: boolean;\n  /**\n   * The attribute that controls the autocomplete behaviour. It can assume various values, like 'on', 'off', but also 'new-password', 'honorific-prefix' and many others.\n   */\n  autoComplete?: string;\n  /**\n   * Additional content or icon to be displayed at the start of the input.\n   */\n  startInputAddOn?: ReactElement;\n  /**\n   * Additional content or icon to be displayed at the end of the input.\n   */\n  endInputAddOn?: ReactElement;\n  /**\n   * The placeholder of the input.\n   */\n  placeholder?: string;\n  /**\n   * If true, the input will display an error state.\n   */\n  minRows?: number;\n}\n\nexport interface TextLabelInputProps extends BaseTextInputProps {\n  /**\n   * The label of the input.\n   */\n  label: string;\n  /**\n   * Props applied to the label element. It is available only when label is a string.\n   */\n  labelProps?: Omit<LabelProps, 'children' | 'required'>;\n}\nexport interface CustomLabelInputProps extends BaseTextInputProps {\n  /**\n   * The label of the input.\n   */\n  label: ReactNode;\n  labelProps?: undefined;\n}\n\nexport type TextInputProps = TextLabelInputProps | CustomLabelInputProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "TextInput.example.tsx",
          "code": "import React from 'react';\nimport TextInput from './TextInput';\n\n// Example of TextInput usage\nconst Example = () => {\n\n  return (\n    <>\n      <TextInput name='email' onChange={() => ''} value='value' required label={<TextInput.Label>Email</TextInput.Label>}  />\n      <TextInput\n        name='phone'\n        onChange={() => ''}\n        value='value'\n        label='Phone Number'\n        labelProps={{ size: 'md', description: 'Your contact number' }}\n        startInputAddOn={<TextInput.AddOn>+39</TextInput.AddOn>}\n        hint='Italian phone number'\n        hintProps={{ size: 'sm' }}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "TextInputBasic",
    "description": "A TextInput component  with a label and hint.",
    "docs_path": "src/TextInputBasic/TextInputBasic.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { TextInputBasic } from '@xtreamsrl/react-ui-kit/TextInputBasic';"
      },
      "info": [
        {
          "source": "TextInputBasic.interface.ts",
          "code": "import {TextInputProps} from '../TextInput'\n\nexport type TextInputBasicProps = Omit<TextInputProps, 'label' | 'labelProps'>\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "TextInputBasic.example.tsx",
          "code": "import React from 'react';\nimport TextInputBasic from './TextInputBasic';\n\n// Example of TextInput usage\nconst Example = () => {\n\n  return (\n    <>\n      <TextInputBasic name='email' onChange={() => ''} value='value' required  />\n      <TextInputBasic\n        name='phone'\n        onChange={() => ''}\n        value='value'\n        startInputAddOn={<TextInputBasic.AddOn>+39</TextInputBasic.AddOn>}\n        hint='Italian phone number'\n        hintProps={{ size: 'sm' }}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Tooltip",
    "description": "Tooltip component is used to display additional information on hover.",
    "docs_path": "src/Tooltip/Tooltip.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Tooltip } from '@xtreamsrl/react-ui-kit/Tooltip';"
      },
      "info": [
        {
          "source": "Tooltip.interface.ts",
          "code": "import { DimensionsProps, Placement, SafeKeyOf } from '../utils';\nimport { ReactElement } from 'react';\n\nexport interface TooltipVariant {\n  dark: boolean;\n  light: boolean;\n}\n\nexport interface TooltipProps {\n  /**\n   * The text to display in the tooltip.\n   */\n  text: string;\n  /**\n   * The id used to identify this component in unit tests.\n   */\n  children: ReactElement;\n  /**\n   * Whether to display an arrow on the tooltip.\n   */\n  hasArrow?: boolean;\n  /**\n   * The caption to display in the tooltip.\n   */\n  caption?: string;\n  /**\n   * The variant to use, 'dark' or 'light'.\n   */\n  variant?: SafeKeyOf<TooltipVariant>;\n  /**\n   * The width of the tooltip.\n   */\n  width?: DimensionsProps['width'];\n  /**\n   * The placement of the tooltip. For example 'bottom-end' or 'top-start' etc.\n   */\n  testId?: string;\n  /**\n   * The placement of the tooltip. For example 'bottom-end' or 'top-start' etc.\n   */\n  placement?: SafeKeyOf<Placement>;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Tooltip.example.tsx",
          "code": "import React from 'react';\nimport Tooltip from './Tooltip';\nimport { Icon } from \"../Icon\";\n\n// Example of Tag usage\nconst Example = () => {\n  return (\n    <>\n      <Tooltip text=\"It's a tooltip\" hasArrow={false}>\n        <Icon name=\"Diamond\" />\n      </Tooltip>\n      <Tooltip text=\"It's a tooltip\" caption=\"caption\" variant=\"light\" placement=\"right\">\n        <Icon name=\"Diamond\" />\n      </Tooltip>\n      <Tooltip text=\"It's a tooltip\" caption=\"caption\" width={280}>\n        <Icon name=\"Diamond\" />\n      </Tooltip>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Typography",
    "description": "Typography component is used to display text in different styles.",
    "docs_path": "src/Typography/Typography.example.tsx",
    "extension": "tsx",
    "docs": {
      "import": {
        "code": "import { Typography } from '@xtreamsrl/react-ui-kit/Typography';"
      },
      "info": [
        {
          "source": "Typography.interface.ts",
          "code": "import { CSSProperties, MouseEventHandler, ReactNode } from 'react';\nimport type { SxProps, Theme } from '@mui/material';\nimport { Color, SafeKeyOf } from '../utils';\n\nexport interface BodyTypographyVariants {\n  'body/xs/regular': true;\n  'body/xs/medium': true;\n  'body/xs/underline-medium': true;\n  'body/xs/semibold': true;\n  'body/xs/bold': true;\n  'body/xs/black': true;\n\n  'body/sm/regular': true;\n  'body/sm/medium': true;\n  'body/sm/underline-medium': true;\n  'body/sm/semibold': true;\n  'body/sm/bold': true;\n  'body/sm/black': true;\n\n  'body/base/regular': true;\n  'body/base/medium': true;\n  'body/base/underline-medium': true;\n  'body/base/semibold': true;\n  'body/base/bold': true;\n  'body/base/black': true;\n\n  'body/lg/regular': true;\n  'body/lg/medium': true;\n  'body/lg/semibold': true;\n  'body/lg/bold': true;\n  'body/lg/black': true;\n\n  'body/xl/regular': true;\n  'body/xl/medium': true;\n  'body/xl/semibold': true;\n  'body/xl/bold': true;\n  'body/xl/black': true;\n\n  'body/xxl/regular': true;\n  'body/xxl/medium': true;\n  'body/xxl/semibold': true;\n  'body/xxl/bold': true;\n  'body/xxl/black': true;\n}\n\nexport interface HeaderTypographyVariants {\n\n  'header/sm/regular': true;\n  'header/sm/medium': true;\n  'header/sm/semibold': true;\n  'header/sm/bold': true;\n  'header/sm/black': true;\n\n  'header/md/regular': true;\n  'header/md/medium': true;\n  'header/md/semibold': true;\n  'header/md/bold': true;\n  'header/md/black': true;\n\n  'header/lg/regular': true;\n  'header/lg/medium': true;\n  'header/lg/semibold': true;\n  'header/lg/bold': true;\n  'header/lg/black': true;\n}\n\nexport interface DisplayTypographyVariants {\n\n  'display/sm/regular': true;\n  'display/sm/medium': true;\n  'display/sm/semibold': true;\n  'display/sm/bold': true;\n  'display/sm/black': true;\n\n  'display/md/regular': true;\n  'display/md/medium': true;\n  'display/md/semibold': true;\n  'display/md/bold': true;\n  'display/md/black': true;\n\n  'display/lg/regular': true;\n  'display/lg/medium': true;\n  'display/lg/semibold': true;\n  'display/lg/bold': true;\n  'display/lg/black': true;\n\n  'display/xl/regular': true;\n  'display/xl/medium': true;\n  'display/xl/semibold': true;\n  'display/xl/bold': true;\n  'display/xl/black': true;\n\n  'display/xxl/regular': true;\n  'display/xxl/medium': true;\n  'display/xxl/semibold': true;\n  'display/xxl/bold': true;\n  'display/xxl/black': true;\n}\nexport interface TypographyVariants extends BodyTypographyVariants, HeaderTypographyVariants, DisplayTypographyVariants {}\n\nexport interface TypographyProps {\n  /**\n   * The content of the component.\n   */\n  children: ReactNode;\n  /**\n   * The inline style object for additional styling.\n   */\n  style?: SxProps<Theme>;\n  /**\n   * The id used to identify this component in unit tests.\n   */\n  testId?: string;\n  /**\n   * The variant to use (e.g., 'body/xs/regular' and many others).\n   */\n  variant?: SafeKeyOf<TypographyVariants>;\n  /**\n   * The font size.\n   */\n  fontSize?: CSSProperties['fontSize'];\n  /**\n   * The color of the text.\n   */\n  color?: Color;\n  /**\n   * The font weight.\n   */\n  fontWeight?: CSSProperties['fontWeight'];\n  /**\n   * The text transform. Sets how the text is capitalized.\n   */\n  textTransform?: CSSProperties['textTransform'];\n  /**\n   * The text align.\n   */\n  textAlign?: CSSProperties['textAlign'];\n  /**\n   * The event handler for the click event.\n   */\n  onClick?: MouseEventHandler<HTMLElement>;\n  /**\n   * If true, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   */\n  noWrap?: boolean;\n  /**\n   * The white space. Defines how white space inside an element is handled.\n   */\n  whiteSpace?: CSSProperties['whiteSpace'];\n  /**\n   * The text overflow. Sets how hidden overflow content is signaled to users.\n   */\n  textOverflow?: CSSProperties['textOverflow'];\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-6': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-6': 40,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  /**\n   * If true, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the component is in a loading state.\n   */\n  loading?: boolean;\n  /**\n   * If true, the component is in an error state.\n   */\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\nexport interface BorderProps {\n  border?: CSSProperties['border'];\n  borderTop?: CSSProperties['borderTop'];\n  borderRight?: CSSProperties['borderRight'];\n  borderBottom?: CSSProperties['borderBottom'];\n  borderLeft?: CSSProperties['borderLeft'];\n}\n\nexport interface FlexChildProps {\n  flex?: CSSProperties['flex'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignSelf?: CSSProperties['alignSelf'];\n  order?: CSSProperties['order'];\n}\n\nexport interface OverflowProps {\n  overflow?: CSSProperties['overflow'];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Typography.example.tsx",
          "code": "import React from 'react';\nimport Typography from './Typography';\n\n// Example of Typography usage\nconst Example = () => {\n\n  return (\n    <>\n      <Typography>body/base/regular</Typography>\n      <Typography variant='header/lg/regular' color='brand'>header/lg/regular</Typography>\n    </>\n  );\n};\n"
        }
      ]
    }
  }
]