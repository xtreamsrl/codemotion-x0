[
  {
    "name": "Accordion",
    "description": "A vertically stacked set of interactive headings that each reveal a section of content.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Accordion/Accordion.example.tsx",
    "docs": {
      "import": {
        "code": "import { Accordion } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Accordion.interface.ts",
          "code": "import { SafeKeyOf } from '../utils';\nimport {ReactNode} from \"react\";\n\nexport interface AccordionVariant {\n  block: true;\n  light: true;\n}\n\nexport interface AccordionProps {\n  children: ReactNode;\n  disabled?: boolean;\n  testId?: string;\n  variant?: SafeKeyOf<AccordionVariant>;\n}\n"
        },
        {
          "source": "AccordionDetails.interface.ts",
          "code": "import { TypographyVariants } from \"../../Typography/Typography.interface\";\nimport {ReactNode} from \"react\";\n\nexport interface AccordionDetailsProps {\n  children: ReactNode;\n  typographyVariant?: keyof TypographyVariants | undefined;\n}\n"
        },
        {
          "source": "AccordionSummary.interface.ts",
          "code": "import { TypographyVariants } from \"../../Typography/Typography.interface\";\n\nexport interface AccordionSummaryProps {\n  children: string;\n  typographyVariant?: keyof TypographyVariants | undefined;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Accordion.example.tsx",
          "code": "import { Accordion } from '../Accordion';\nimport React from 'react';\n\nconst AccordionExample = () => {\n  return (\n    <>\n      <Accordion variant=\"block\">\n        <Accordion.Summary>Title</Accordion.Summary>\n        <Accordion.Details>Description</Accordion.Details>\n      </Accordion>\n      <Accordion variant=\"light\">\n        <Accordion.Summary>Title</Accordion.Summary>\n        <Accordion.Details>Description</Accordion.Details>\n      </Accordion>\n      <Accordion variant=\"light\" disabled>\n        <Accordion.Summary>Title</Accordion.Summary>\n        <Accordion.Details>Description</Accordion.Details>\n      </Accordion>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Banner",
    "description": "A notification bar that can be used to display important messages to the user. It supports various properties such as color, size, and the ability to be dismissed.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Banner/Banner.example.tsx",
    "docs": {
      "import": {
        "code": "import { Banner } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Banner.interface.ts",
          "code": "import { ReactNode, SyntheticEvent } from 'react';\nimport { SxProps, Theme } from '@mui/material';\nimport { SafeKeyOf } from '../utils';\nimport { BannerActionProps } from './actions';\n\n/**\n * @interface BannerVariant\n * @member {true} standard corresponds to the 'tinted' Figma variant\n * @member {true} filled corresponds to the 'bold' Figma variant\n */\nexport interface BannerVariant {\n  standard: true;\n  filled: true;\n}\n\nexport interface BannerState {\n  info: true;\n  success: true;\n  warning: true;\n  error: true;\n}\nexport interface BannerProps {\n  children: ReactNode;\n  variant?: SafeKeyOf<BannerVariant>;\n  state?: SafeKeyOf<BannerState>;\n  color?: SafeKeyOf<BannerState>;\n  sx?: SxProps<Theme>;\n  center?: boolean;\n  icon?: ReactNode;\n  onClose?: (e: SyntheticEvent) => void;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Banner.example.tsx",
          "code": "import React from 'react';\nimport Banner from './Banner';\n\n// Example of Banner usage\nconst Example = () => {\n\n  return (\n    <>\n      <Banner onClose={() => 'close banner'}>\n        <Banner.Message>xtream UI Kit library and design system</Banner.Message>\n        <Banner.PrimaryAction onClick={() => ''}>Learn More</Banner.PrimaryAction>\n        <Banner.SecondaryAction onClick={() => ''}>And More</Banner.SecondaryAction>\n      </Banner>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Breadcrumbs",
    "description": "A navigational aid that allows users to keep track of their locations within the application. It displays the current location and also provides a means to navigate back to any levels above in the hierarchy.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Breadcrumbs/Breadcrumbs.example.tsx",
    "docs": {
      "import": {
        "code": "import { Breadcrumbs } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Breadcrumbs.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf } from '../utils';\nimport * as React from 'react';\n\nexport interface BreadcrumbsVariants {\n  stroke: true;\n  shape: true;\n}\nexport interface BreadcrumbsProps {\n  children: ReactNode;\n  variant?: SafeKeyOf<BreadcrumbsVariants>;\n  itemsAfterCollapse?: number;\n  itemsBeforeCollapse?: number;\n  maxItems?: number;\n  separator?: React.ReactNode;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Breadcrumbs.example.tsx",
          "code": "import React from 'react';\nimport Breadcrumbs from './Breadcrumbs';\nimport { Icon } from '../Icon';\nimport { Link } from '../Link';\n\n// Example of Breadcrumbs usage\nconst Example = () => {\n\n  return (\n    <>\n      <Breadcrumbs>\n        <Link size='lg' href='#' rightIcon={<Icon name='Home' />}/>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' current>Link</Link>\n      </Breadcrumbs>\n\n      <Breadcrumbs variant='shape' maxItems={3} itemsAfterCollapse={3} >\n        <Link size='lg' href='#' rightIcon={<Icon name='Home' />}/>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' current>Link</Link>\n      </Breadcrumbs>\n\n      <Breadcrumbs variant='stroke' maxItems={3} itemsBeforeCollapse={2} itemsAfterCollapse={3}>\n        <Link size='lg' href='#' rightIcon={<Icon name='Home' />}/>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' >Link</Link>\n        <Link size='lg' href='#' current>Link</Link>\n      </Breadcrumbs>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Button",
    "description": "Displays a button or a component that looks like a button.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Button/Button.example.tsx",
    "docs": {
      "import": {
        "code": "import { Button } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Button.interface.ts",
          "code": "import { MouseEventHandler, ReactNode } from 'react';\nimport { State, Size, ThemeColor, SafeKeyOf } from '../utils';\nimport { SxProps, Theme } from '@mui/material';\n\ntype ButtonColor = SafeKeyOf<ThemeColor>;\ntype ButtonSize = SafeKeyOf<Size>;\n\n// Button states: hovered, pressed, focused, disabled, loading\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ButtonState extends Omit<State, 'error'> {}\n\n/**\n * @interface ButtonVariant\n * @member {true} contained corresponds to the 'filled' Figma variant\n * @member {true} text corresponds to the 'plain' Figma variant\n */\nexport interface ButtonVariant {\n  contained: true;\n  outlined: true;\n  tinted: true;\n  text: true;\n}\n\nexport interface BaseButtonProps extends ButtonState {\n  testId?: string;\n  type?: 'button' | 'submit' | 'reset';\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  children?: string;\n  variant?: SafeKeyOf<ButtonVariant>;\n  color?: ButtonColor;\n  size?: ButtonSize;\n  onlyIcon?: true;\n  icon?: ReactNode;\n  leftIcon?: ReactNode;\n  rightIcon?: ReactNode;\n  style?: SxProps<Theme>;\n  className?: string;\n}\n\nexport interface SimpleButtonProps extends BaseButtonProps {\n  children: string;\n  onlyIcon?: undefined;\n  icon?: undefined;\n}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  children?: undefined;\n  onlyIcon: true;\n  icon: ReactNode;\n  leftIcon?: undefined;\n  rightIcon?: undefined;\n}\n\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Button.example.tsx",
          "code": "import React from 'react';\nimport Button from './Button';\n\n\n// Example of Button usage\nconst Example = () => {\n\n  return (\n    <>\n      <Button onClick={() => console.log('click')} onlyIcon icon={<></>} />\n      <Button onClick={() => console.log('click')} color='red' leftIcon={<></>} size='sm'>Like</Button>\n      <Button onClick={() => console.log('click')} variant='tinted' color='green'>Success Button</Button>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Calendar",
    "description": "",
    "docs_path": "none",
    "docs": {
      "import": {
        "code": "import { Calendar } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": []
    }
  },
  {
    "name": "Card",
    "description": "Displays a card with header, content, and footer.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Card/Card.example.tsx",
    "docs": {
      "import": {
        "code": "import { Card } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Card.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { DimensionsProps } from '../utils';\n\nexport interface CardProps extends DimensionsProps {\n  children: ReactNode;\n}\n"
        },
        {
          "source": "Header.interface.ts",
          "code": "import React from 'react';\nimport { TypographyProps } from '@mui/material/Typography';\nimport { PaddingProps } from '../../utils';\nimport { Typography } from '../../Typography';\n\nexport interface CardHeaderProps extends PaddingProps {\n  action?: React.ReactNode;\n  avatar?: React.ReactNode;\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography?: boolean;\n  subheader?: React.ReactNode;\n  title?: React.ReactNode;\n  titleTypographyProps?: TypographyProps<\n    typeof Typography,\n    {\n      component?: typeof Typography;\n    }\n  >;\n  subheaderTypographyProps?: TypographyProps<\n    typeof Typography,\n    {\n      component?: typeof Typography;\n    }\n  >;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Card.example.tsx",
          "code": "import React from 'react';\nimport Card from './Card';\nimport { Button, Flex, Icon } from '../index';\n\n// Example of Card usage\nconst Example = () => {\n\n  return (\n    <>\n      <Card width={300}>\n        <Card.Header title=\"Title\" subheader=\"Subtitle\" action={<Button size='sm' onClick={() => ''} variant='text' onlyIcon icon={<Icon name=\"MoreVertical\" />} />}></Card.Header>\n        <Card.Image height='fit-content' src='https://mui.com/static/images/cards/live-from-space.jpg' />\n        <Card.Footer p='sm-6'>\n          <Button color='grey' size='sm' variant='text' onClick={() => ''} onlyIcon icon={<Icon name=\"Heart\" />} />\n        </Card.Footer>\n      </Card>\n\n      <Card height={200}>\n        <Flex p='sm-8' gap='sm-8'>\n          <Card.Image borderRadius={8} width='166px' height='auto' src='https://mui.com/static/images/cards/live-from-space.jpg' />\n          <Flex direction='column' justifyContent='space-between' flex={1}>\n            <Card.Header pt='sm-1' title=\"Title\" subheader=\"Subtitle\" action={<Button size='sm' onClick={() => ''} variant='text' onlyIcon icon={<Icon name=\"MoreVertical\" />} />}></Card.Header>\n            <Card.Footer p={0}>\n              <Button color='grey' size='sm' variant='text' onClick={() => ''} onlyIcon icon={<Icon name=\"Heart\" />} />\n            </Card.Footer>\n          </Flex>\n        </Flex>\n      </Card>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Checkbox",
    "description": "A control that allows the user to toggle between checked and not checked.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Checkbox/Checkbox.example.tsx",
    "docs": {
      "import": {
        "code": "import { Checkbox } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Checkbox.interface.ts",
          "code": "import { ChangeEvent } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\n\n// Checkbox states: hovered, pressed, focused, disabled, error\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface CheckboxState extends Omit<State, 'loading'> {}\nexport interface CheckboxBaseProps extends CheckboxState {\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  checked?: boolean;\n  indeterminate?: boolean;\n  size?: SafeKeyOf<Size>;\n}\n\nexport type CheckboxProps = CheckboxBaseProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Checkbox.example.tsx",
          "code": "import React from 'react';\nimport Checkbox from './Checkbox';\n\n// Example of Checkbox usage\nconst Example = () => {\n\n  return (\n    <>\n      <Checkbox checked disabled />\n      <Checkbox checked={false} />\n      <Checkbox indeterminate error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "CheckboxLabel",
    "description": "A combination of a checkbox and a label. It allows users to make a binary choice for a given option and provides a label for better understanding of the option.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/CheckboxLabel/CheckboxLabel.example.tsx",
    "docs": {
      "import": {
        "code": "import { CheckboxLabel } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "CheckboxLabel.interface.ts",
          "code": "import { CheckboxBaseProps } from '../Checkbox';\n\nexport interface CheckboxLabelProps extends CheckboxBaseProps {\n  label: string;\n  caption?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "CheckboxLabel.example.tsx",
          "code": "import React from 'react';\nimport CheckboxLabel from './CheckboxLabel';\n\n// Example of CheckboxLabel usage\nconst Example = () => {\n\n  return (\n    <>\n      <CheckboxLabel label='Label' caption='caption' size='sm' indeterminate checked onChange={() => ''} />\n      <CheckboxLabel label='Label' checked onChange={() => ''} />\n      <CheckboxLabel label='Label' error checked onChange={() => ''} />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Combobox",
    "description": "A combination of a text input and a dropdown list. It allows users to select an option from a predefined list or enter a custom value.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Combobox/Combobox.example.tsx",
    "docs": {
      "import": {
        "code": "import { Combobox } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Combobox.interface.ts",
          "code": "import React, { ReactNode } from 'react';\nimport {\n  AutocompleteChangeDetails,\n  AutocompleteChangeReason,\n  AutocompleteFreeSoloValueMapping,\n  AutocompleteRenderOptionState, AutocompleteValue,\n} from '../Multiselect';\nimport { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\n\nexport interface ComboboxInputProps<Value> {\n  options: ReadonlyArray<Value>;\n  onChange?: (\n    event: React.SyntheticEvent,\n    value: AutocompleteValue<Value, false, false, false>,\n    reason: AutocompleteChangeReason,\n    details?: AutocompleteChangeDetails<Value>,\n  ) => void;\n  noOptionsText: ReactNode;\n  value?: AutocompleteValue<Value, false, false, false>;\n  getOptionLabel?: (option: Value | AutocompleteFreeSoloValueMapping<boolean | undefined>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: Value,\n    state: AutocompleteRenderOptionState,\n    ownerState: any,\n  ) => React.ReactNode;\n}\n\ntype TextInputProps = Omit<TextLabelInputProps, 'value' | 'onChange'>;\ntype CustomLabelProps = Omit<CustomLabelInputProps, 'value' | 'onChange'>;\n\nexport interface TextLabelComboboxInputProps<Value> extends ComboboxInputProps<Value>, TextInputProps {}\nexport interface CustomLabelComboboxInputProps<Value> extends ComboboxInputProps<Value>, CustomLabelProps {}\n\nexport type ComboboxProps<Value> = TextLabelComboboxInputProps<Value> | CustomLabelComboboxInputProps<Value>;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Combobox.example.tsx",
          "code": "import React from 'react';\nimport Combobox from './Combobox';\nimport Select from '../Select/Select';\nimport { Checkbox } from '../Checkbox';\n\n// Example of Combobox usage\nconst Example = () => {\n\n  return (\n    <>\n      <Combobox\n        noOptionsText='No options'\n        size='lg'\n        options={['One', 'Two', 'Three']}\n        name='checkbox'\n        label='Label'\n        renderOption={(props, option, state, ownerState) => {\n          return (\n            <Select.Option {...props} startAddOn={<Checkbox checked={state.selected} />}>\n              {ownerState.getOptionLabel(option)}\n            </Select.Option>\n          )}}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "DateInput",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/DateInput/DateInput.example.tsx",
    "docs": {
      "import": {
        "code": "import { DateInput } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "DateInput.interface.ts",
          "code": "import { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\n\ntype TextInputProps = Omit<TextLabelInputProps, 'value' | 'onChange' | 'endInputAddOn'>;\ntype CustomLabelProps = Omit<CustomLabelInputProps, 'value' | 'onChange' | 'endInputAddOn'>;\n\nexport type CalendarPickerView = 'year' | 'day' | 'month';\nexport interface BaseDateInputProps {\n  views?: CalendarPickerView[];\n  actions?: boolean;\n  format?: string;\n  value?: Date | null;\n  onChange?: (date: Date | null) => void;\n}\n\nexport interface TextLabelDateInputProps extends BaseDateInputProps, TextInputProps {}\nexport interface CustomLabelDateInputProps extends BaseDateInputProps, CustomLabelProps {}\n\nexport type DateInputProps = TextLabelDateInputProps | CustomLabelDateInputProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "DateInput.example.tsx",
          "code": "import React from 'react';\nimport DateInput from './DateInput';\nimport { TextInput } from '../TextInput';\nimport Icon from '../Icon/Icon';\n\n// Example of DateInput usage\nconst Example = () => {\n\n  return (\n    <>\n      <DateInput\n        size='lg'\n        name='birthday'\n        label='Birthday'\n        required\n        onChange={(date) => console.log('birthday', date)}\n      />\n\n      <DateInput\n        size='sm'\n        name='startDate'\n        label='Start Date'\n        labelProps={{ description: 'The day you started working', icon: <Icon name='Info' /> }}\n        actions\n        startInputAddOn={<TextInput.AddOn>From</TextInput.AddOn>}\n        onChange={(date) => console.log('from', date)}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Divider",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Divider/Divider.example.tsx",
    "docs": {
      "import": {
        "code": "import { Divider } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Divider.interface.ts",
          "code": "import {SafeKeyOf} from '../utils';\n\nexport interface DividerTextAlignment {\n  center: string;\n  right: string;\n  left: string;\n  top: string;\n  bottom: string;\n  none: string;\n}\n\nexport interface DividerDirection {\n  horizontal: true;\n  vertical: true;\n}\n\nexport interface DividerProps {\n  children?: string;\n  showText?: SafeKeyOf<DividerTextAlignment>,\n  direction?: SafeKeyOf<DividerDirection>\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Divider.example.tsx",
          "code": "import React from 'react';\nimport Divider from './Divider';\nimport {Flex} from \"../Flex\";\n\n// Example of Divider usage\nconst Example = () => {\n\n  return (\n    <>\n        <Flex direction='row' gap='sm-8' padding='sm-8'>\n            <Divider showText={\"center\"} direction={\"vertical\"}>Text</Divider>\n            <Divider showText={\"top\"} direction={\"vertical\"}>Text</Divider>\n            <Divider showText={\"bottom\"} direction={\"vertical\"}>Text</Divider>\n            <Divider direction={\"vertical\"}/>\n        </Flex>\n\n        {/* These two are equal */}\n        <Divider children={\"test\"} direction={\"horizontal\"} showText={'none'}/>\n        <Divider/>\n\n        <Divider showText={\"center\"} direction={\"horizontal\"}>Text</Divider>\n        <Divider showText={\"left\"} direction={\"horizontal\"}>Text</Divider>\n        <Divider showText={\"right\"} direction={\"horizontal\"}>Text</Divider>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Dropmenu",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Dropmenu/Dropmenu.example.tsx",
    "docs": {
      "import": {
        "code": "import { Dropmenu } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Dropmenu.interface.ts",
          "code": "export interface DropmenuProps {\n  anchorEl?:\n    | null\n    | Element\n    | (() => Element);\n  position?: 'left' | 'center' | 'right';\n  open?: boolean;\n  onClose?: {\n    bivarianceHack(event: {}, reason: 'backdropClick' | 'escapeKeyDown'): void;\n  }['bivarianceHack'];\n}\n"
        },
        {
          "source": "Item.interface.ts",
          "code": "import { ReactNode, MouseEventHandler } from 'react';\nimport { SafeKeyOf, Size } from '../../utils';\n\nexport interface DropmenuItemProps {\n  children: ReactNode;\n  onClick?: MouseEventHandler<HTMLLIElement>;\n  value?: string | number;\n  size?: SafeKeyOf<Size>;\n  disabled?: boolean;\n  selected?: boolean;\n  startAddOn?: ReactNode;\n  endAddOn?: ReactNode;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Dropmenu.example.tsx",
          "code": "import Button from '../Button/Button';\nimport { useDropmenu } from './hooks/useDropmenu';\nimport Dropmenu from './Dropmenu';\nimport Icon from '../Icon/Icon';\n\n// Example of Dropmenu usage\nconst Example = () => {\n  const { anchorEl, isOpen, openDropmenu, closeDropmenu } = useDropmenu();\n\n  return (\n    <>\n      <Button onClick={openDropmenu}>Trigger</Button>\n\n      <Dropmenu open={isOpen} anchorEl={anchorEl} onClose={closeDropmenu}>\n        <Dropmenu.Header>Header</Dropmenu.Header>\n        <Dropmenu.Item onClick={() => ''} size='sm' startAddOn={<Icon name='Home' />} endAddOn='AAAA' value={10}>Ten</Dropmenu.Item>\n        <Dropmenu.Item onClick={() => ''} size='sm' value={20}>Twenty</Dropmenu.Item>\n        <Dropmenu.Item disabled onClick={() => ''} size='sm' value={30}>Thirty</Dropmenu.Item>\n        <Dropmenu.Footer>Footer</Dropmenu.Footer>\n      </Dropmenu>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Feedback",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Feedback/Feedback.example.tsx",
    "docs": {
      "import": {
        "code": "import { Feedback } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Feedback.interface.ts",
          "code": "import { SafeKeyOf } from '../utils'\n\nexport interface FeedbackType {\n  emoji: true,\n  thumb: true\n}\n\nexport interface FeedbackSize {\n  sm: true\n  md: true\n  lg: true\n}\n\nexport type FeedbackValues<T extends SafeKeyOf<FeedbackType>> =\n    T extends \"emoji\" ? 'like' | 'dislike' | 'neutral' | null : 'like' | 'dislike' | null;\n\nexport interface BaseFeedbackProps {\n  size?: SafeKeyOf<FeedbackSize>\n  value: FeedbackValues<SafeKeyOf<FeedbackType>>;\n}\n\nexport interface EmojiFeedbackProps extends BaseFeedbackProps {\n  type: 'emoji'\n  onChange?: (value : FeedbackValues<'emoji'>) => void\n  value: 'like' | 'dislike' | 'neutral' | null\n}\n\nexport interface ThumbFeedbackProps extends BaseFeedbackProps {\n  type: 'thumb',\n  onChange?: (value : FeedbackValues<'thumb'>) => void\n  value: 'like' | 'dislike' | null\n}\n\nexport type FeedbackProps = EmojiFeedbackProps | ThumbFeedbackProps;\n\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Feedback.example.tsx",
          "code": "import React, {useState} from 'react';\nimport Feedback from './Feedback';\nimport {Flex} from \"@xtreamsrl/ui-kit\";\nimport {FeedbackValues} from \"./Feedback.interface\";\n\n// Example of Feedback usage\nconst Example = () => {\n    const [checkedEmoji, setCheckedEmoji] = useState<FeedbackValues<'emoji'>>('like')\n    const [checkedThumb, setCheckedThumb] = useState<FeedbackValues<'thumb'>>(null)\n\n    //the state is required for each Feedback\n\n    return (\n    <>\n        <Flex gap={'md-8'}>\n            <Flex direction=\"column\" gap='sm-2'>\n                <Feedback onChange={(value) => setCheckedEmoji(value)} value={checkedEmoji} size={'sm'} type={'emoji'}/>\n                <Feedback type='emoji' size='md' value={null}/>\n                <Feedback type='emoji' size='lg' value={null}/>\n            </Flex>\n\n            <Flex direction=\"column\" gap='sm-2'>\n                <Feedback onChange={(value) => setCheckedThumb(value)} value={checkedThumb} size={'sm'} type={'thumb'}/>\n                <Feedback type='thumb' size='md' value={null}/>\n                <Feedback type='thumb' size='lg' value={null}/>\n            </Flex>\n        </Flex>\n\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "FileInput",
    "description": "A control for selecting a file from the user's file system. It provides a user-friendly interface for file selection and supports various properties such as file type, size limit, and multiple file selection.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/FileInput/FileInput.example.tsx",
    "docs": {
      "import": {
        "code": "import { FileInput } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "FileInput.interface.ts",
          "code": "import { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\nimport { State } from '../utils';\n\nexport interface BaseFileInputProps {\n  accept?: string;\n  loading?: State['loading'];\n  value: File | null;\n  onChange: (file: File | null) => void;\n  uploadButtonText: string;\n  cancelButtonText: string;\n  placeholder: string;\n}\n\ntype PropsToOmit = 'endInputAddOn' | 'type' | 'value' | 'onChange' | 'placeholder';\nexport interface TextLabelFileInputProps extends BaseFileInputProps, Omit<TextLabelInputProps, PropsToOmit> {}\nexport interface CustomLabelFileInputProps extends BaseFileInputProps,  Omit<CustomLabelInputProps, PropsToOmit> {}\n\nexport type FileInputProps = TextLabelFileInputProps | CustomLabelFileInputProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "FileInput.example.tsx",
          "code": "import React, { useState } from 'react';\nimport FileInput from './FileInput';\n\n// Example of FileInput usage\nconst Example = () => {\n  const [file, setFile] = useState<File | null>(null);\n\n  return (\n    <>\n      <FileInput\n        loading\n        size='sm'\n        variant='filled'\n        cancelButtonText='Cancel'\n        uploadButtonText='Browse'\n        label='File'\n        name='uplaod'\n        onChange={file => setFile(file)}\n        placeholder='Upload'\n        value={file}\n      />\n      <FileInput\n        error\n        size='md'\n        variant='standard'\n        cancelButtonText='Cancel'\n        uploadButtonText='Browse'\n        label='File'\n        name='uplaod'\n        onChange={file => setFile(file)}\n        placeholder='Upload'\n        value={file}\n      />\n      <FileInput\n        disabled\n        size='lg'\n        variant='outlined'\n        cancelButtonText='Cancel'\n        uploadButtonText='Browse'\n        label='File'\n        name='uplaod'\n        onChange={file => setFile(file)}\n        placeholder='Upload'\n        value={file}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Flex",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Flex/Flex.example.tsx",
    "docs": {
      "import": {
        "code": "import { Flex } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Flex.interface.ts",
          "code": "import { CSSProperties } from 'react';\nimport { Color, MarginProps, PaddingProps, ResponsiveStyleValue, SafeKeyOf, Space, ThemeColor } from '../utils';\n\nexport interface FlexProps extends MarginProps, PaddingProps {\n  direction?: ResponsiveStyleValue<'row' | 'row-reverse' | 'column' | 'column-reverse'>;\n  gap?: ResponsiveStyleValue<number | string | Space>;\n  order?: CSSProperties['order'];\n  flex?: CSSProperties['flex'];\n  flexWrap?: CSSProperties['flexWrap'];\n  flexBasis?: CSSProperties['flexBasis'];\n  flexGrow?: CSSProperties['flexGrow'];\n  flexShrink?: CSSProperties['flexShrink'];\n  alignContent?: CSSProperties['alignContent'];\n  alignItems?: CSSProperties['alignItems'];\n  alignSelf?: CSSProperties['alignSelf'];\n  justifyContent?: CSSProperties['justifyContent'];\n  justifyItems?: CSSProperties['justifyItems'];\n  justifySelf?: CSSProperties['justifySelf'];\n  className?: string;\n  backgroundColor?: Color;\n  position?: CSSProperties['position']\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Flex.example.tsx",
          "code": "import React from 'react';\nimport Flex from './Flex';\n\n// Example of Flex usage\nconst Example = () => {\n\n  return (\n    <Flex gap={2}>\n      <div>AAA</div>\n      <div>AAA</div>\n    </Flex>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Icon",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Icon/Icon.example.tsx",
    "docs": {
      "import": {
        "code": "import { Icon } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Icon.interface.ts",
          "code": "import { icons } from 'lucide-react';\nimport { AnyOtherString, ThemeColor, SafeKeyOf } from '../utils';\nimport { CSSProperties } from 'react';\n\ntype LucideIconName = keyof typeof icons;\ntype IconColor = SafeKeyOf<ThemeColor>;\nexport interface IconBaseProps {\n  fontSize?: CSSProperties['fontSize'];\n  color?: IconColor | AnyOtherString;\n\n  name?: LucideIconName;\n  children?: React.ReactNode;\n}\n\nexport interface LucideIcon extends IconBaseProps {\n  name: LucideIconName;\n  children?: undefined;\n}\nexport interface CustomIcon extends IconBaseProps {\n  children: React.ReactNode;\n  name?: undefined;\n}\n\nexport type IconProps = LucideIcon | CustomIcon;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Icon.example.tsx",
          "code": "import React from 'react';\nimport Icon from './Icon';\n\n// Example of Icon usage\nconst Example = () => {\n\n  return (\n    <>\n      <Icon name='Diamond' color='brand' />\n      <Icon name='Diamond' color='warning.6' />\n      <Icon name='Diamond' fontSize={40} />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Link",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Link/Link.example.tsx",
    "docs": {
      "import": {
        "code": "import { Link } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Link.interface.ts",
          "code": "import { MouseEventHandler, ReactNode } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\nimport { TypographyProps } from '../Typography';\n\n/**\n * @interface LinkProps\n * @member {boolean} current flag for marking the current Link in a Breadcrumb\n */\nexport interface LinkProps extends Pick<State, 'disabled'> {\n  children?: string;\n  href?: string;\n  onClick?: MouseEventHandler<HTMLAnchorElement>;\n  size?: SafeKeyOf<Size>;\n  color?: TypographyProps['color'];\n  underline?: boolean;\n  leftIcon?: ReactNode;\n  rightIcon?: ReactNode;\n\n  current?: boolean;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Link.example.tsx",
          "code": "import React from 'react';\nimport Link from './Link';\nimport Icon from '../Icon/Icon';\n\n// Example of Link usage\nconst Example = () => {\n\n  return (\n    <>\n      <Link size='lg' underline href='#' rightIcon={<Icon name='ArrowRight' />}>View more</Link>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Modal",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Modal/Modal.example.tsx",
    "docs": {
      "import": {
        "code": "import { Modal } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Modal.interface.ts",
          "code": "import { MouseEventHandler, ReactNode } from 'react';\n\nexport interface ModalProps {\n  open: boolean;\n  onClose: MouseEventHandler<HTMLButtonElement | HTMLDivElement>;\n  children: ReactNode;\n  showCloseButton?: boolean;\n}\n"
        },
        {
          "source": "ModalContent.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { DimensionsProps } from '../../utils';\n\nexport interface ModalContentProps {\n  children: ReactNode;\n  maxHeight?: DimensionsProps['height'];\n}\n"
        },
        {
          "source": "ModalFooter.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf } from '../../utils';\n\nexport interface ModalFooterType {\n  right: string;\n  left: string;\n  fullwidth: string;\n}\n\nexport interface ModalFooterProps {\n  children: ReactNode;\n  type: SafeKeyOf<ModalFooterType>;\n  divider?: boolean;\n}\n"
        },
        {
          "source": "ModalHeader.interface.ts",
          "code": "import { SafeKeyOf } from '../../utils';\n\nexport interface ModalHeaderVariant {\n  regular: true;\n  bold: true;\n}\n\nexport interface ModalHeaderProps {\n  children: string;\n  variant?: SafeKeyOf<ModalHeaderVariant>;\n}\n"
        },
        {
          "source": "PrimaryAction.interface.ts",
          "code": "import { MouseEventHandler } from 'react';\n\nexport interface PrimaryActionProps {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  children: string;\n}\n"
        },
        {
          "source": "SecondaryAction.interface.ts",
          "code": "import { MouseEventHandler } from 'react';\n\nexport interface SecondaryActionProps {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  children: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Modal.example.tsx",
          "code": "import React, { useState } from 'react';\nimport Modal from './Modal';\nimport { Typography } from '../Typography';\n\n// Example of Modal usage\nconst Example = () => {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <Modal open={open} onClose={() => setOpen(false)}>\n      <Modal.Header>Header</Modal.Header>\n      <Modal.Content>\n        <Typography variant=\"body/sm/regular\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas in\n          ante in leo consequat sagittis. Integer a dictum nibh. Aliquam purus\n          ipsum.\n        </Typography>\n      </Modal.Content>\n      <Modal.Footer type=\"left\">\n        <Modal.PrimaryAction onClick={() => console.log('click')}>\n          Primary Action\n        </Modal.PrimaryAction>\n        <Modal.SecondaryAction onClick={() => console.log('click')}>\n          Secondary Action\n        </Modal.SecondaryAction>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Multiselect",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Multiselect/Multiselect.example.tsx",
    "docs": {
      "import": {
        "code": "import { Multiselect } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Multiselect.interface.ts",
          "code": "import React, { ReactNode } from 'react';\nimport { CustomLabelInputProps, TextLabelInputProps } from '../TextInput';\n\n\nexport type AutocompleteFreeSoloValueMapping<FreeSolo> = FreeSolo extends true ? string : never;\nexport interface AutocompleteRenderOptionState {\n  inputValue: string;\n  index: number;\n  selected: boolean;\n}\n\nexport type AutocompleteRenderGetTagProps = ({ index }: { index: number }) => {\n  key: number;\n  className: string;\n  disabled: boolean;\n  'data-tag-index': number;\n  tabIndex: -1;\n  onDelete: (event: any) => void;\n};\n\nexport type AutocompleteChangeReason =\n  | 'createOption'\n  | 'selectOption'\n  | 'removeOption'\n  | 'clear'\n  | 'blur';\nexport interface AutocompleteChangeDetails<Value = string> {\n  option: Value;\n}\n\nexport type AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo> = Multiple extends true\n  ? Array<Value | AutocompleteFreeSoloValueMapping<FreeSolo>>\n  : DisableClearable extends true\n    ? NonNullable<Value | AutocompleteFreeSoloValueMapping<FreeSolo>>\n    : Value | null | AutocompleteFreeSoloValueMapping<FreeSolo>;\n\nexport interface MultiselectInputProps<Value> {\n  options: ReadonlyArray<Value>;\n  noOptionsText: ReactNode;\n  value?: AutocompleteValue<Value, true, false, false>;\n  onChange?: (\n    event: React.SyntheticEvent,\n    value: AutocompleteValue<Value, true, false, false>,\n    reason: AutocompleteChangeReason,\n    details?: AutocompleteChangeDetails<Value>,\n  ) => void;\n  getOptionLabel?: (option: Value | AutocompleteFreeSoloValueMapping<boolean | undefined>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: Value,\n    state: AutocompleteRenderOptionState,\n    ownerState: any,\n  ) => React.ReactNode;\n  renderTags?: (\n    value: AutocompleteValue<Value, true, false, false>,\n    getTagProps: AutocompleteRenderGetTagProps,\n    ownerState: any,\n  ) => React.ReactNode;\n}\n\ntype TextInputProps = Omit<TextLabelInputProps, 'value' | 'onChange'>;\ntype CustomLabelProps = Omit<CustomLabelInputProps, 'value' | 'onChange'>;\n\nexport interface TextLabelMultiselectInputProps<Value> extends MultiselectInputProps<Value>, TextInputProps {}\nexport interface CustomLabelMultiselectInputProps<Value> extends MultiselectInputProps<Value>, CustomLabelProps {}\n\nexport type MultiselectProps<Value> = TextLabelMultiselectInputProps<Value> | CustomLabelMultiselectInputProps<Value>;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Multiselect.example.tsx",
          "code": "import React from 'react';\nimport Multiselect from './Multiselect';\nimport Icon from '../Icon/Icon';\nimport Select from '../Select/Select';\nimport { Tag } from '../Tag';\n\n// Example of Multiselect usage\nconst Example = () => {\n\n  return (\n    <>\n      <Multiselect\n        noOptionsText='No options'\n        size='lg'\n        options={['One', 'Two', 'Three']}\n        name='numbers'\n        label='Label'\n      />\n\n      <Multiselect\n        noOptionsText='No users'\n        size='lg'\n        options={['John Doe', 'Jane Doe', 'Bruce Lee']}\n        name='numbers'\n        renderOption={(props, option, state, ownerState) => (\n          <Select.Option {...props} startAddOn={<Icon name='User' />}>\n            {ownerState.getOptionLabel(option)}\n          </Select.Option >\n        )}\n        renderTags={(values, getTagProps, { getOptionLabel }) => {\n          return values.map((value, index) => (\n            <Tag size='md' icon={<Icon name='User' />} text={(getOptionLabel ? getOptionLabel(value) : value) as string} {...getTagProps({ index })} />\n          ));\n        }}\n        label='Users'\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "ProgressBar",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/ProgressBar/ProgressBar.example.tsx",
    "docs": {
      "import": {
        "code": "import { ProgressBar } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "ProgressBar.interface.ts",
          "code": "import {SafeKeyOf} from '../utils'\n\nexport interface ProgressBarType {\n    default: string,\n    separated: string\n}\n\ninterface Progress {\n    0: string,\n    25: string,\n    50: string,\n    75: string,\n    100: string\n}\n\nexport interface ProgressBarProps {\n    progress: SafeKeyOf<Progress>\n    type?: SafeKeyOf<ProgressBarType>\n    inverted?: boolean\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "ProgressBar.example.tsx",
          "code": "import React from 'react';\nimport ProgressBar from './ProgressBar';\nimport {Flex} from \"@xtreamsrl/ui-kit\";\n\n// Example of ProgressBar usage\nconst Example = () => {\n\n    return (\n        <>\n            <Flex direction='column' gap='md-4'>\n                <ProgressBar progress={0} />\n                <ProgressBar progress={25} />\n                <ProgressBar progress={50} />\n                <ProgressBar progress={75} />\n                <ProgressBar progress={100} />\n            </Flex>\n            <Flex direction='column' gap='md-4' backgroundColor='grey'>\n                <ProgressBar progress={0} inverted={true}/>\n                <ProgressBar progress={25} inverted={true}/>\n                <ProgressBar progress={50} inverted={true}/>\n                <ProgressBar progress={75} inverted={true}/>\n                <ProgressBar progress={100} inverted={true}/>\n            </Flex>\n\n            <Flex direction='column' gap='md-4'>\n                <ProgressBar type='separated' progress={0} />\n                <ProgressBar type='separated' progress={25} />\n                <ProgressBar type='separated' progress={50} />\n                <ProgressBar type='separated' progress={75} />\n                <ProgressBar type='separated' progress={100} />\n            </Flex>\n            <Flex direction='column' gap='md-4' backgroundColor='grey'>\n                <ProgressBar type='separated' progress={0} inverted={true}/>\n                <ProgressBar type='separated' progress={25} inverted={true}/>\n                <ProgressBar type='separated' progress={50} inverted={true}/>\n                <ProgressBar type='separated' progress={75} inverted={true}/>\n                <ProgressBar type='separated' progress={100} inverted={true}/>\n            </Flex>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Radio",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Radio/Radio.example.tsx",
    "docs": {
      "import": {
        "code": "import { Radio } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Radio.interface.ts",
          "code": "import { SyntheticEvent } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\n\n// Radio states: hovered, pressed, focused, disabled, error\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface RadioState extends Omit<State, 'loading'> {}\nexport interface RadioProps extends RadioState {\n  onChange?: (event: SyntheticEvent<Element, Event>, checked: boolean) => void\n  checked?: boolean;\n  value?: any;\n  size?: SafeKeyOf<Size>;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Radio.example.tsx",
          "code": "import React from 'react';\nimport Radio from './Radio';\n\n// Example of Checkbox usage\nconst Example = () => {\n\n  return (\n    <>\n      <Radio checked disabled />\n      <Radio checked={false} />\n      <Radio checked error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "RadioGroup",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/RadioGroup/RadioGroup.example.tsx",
    "docs": {
      "import": {
        "code": "import { RadioGroup } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "RadioGroup.interface.ts",
          "code": "import * as React from 'react';\nimport { FlexProps } from '../Flex';\n\nexport interface RadioGroupProps {\n  children: React.ReactNode;\n  defaultValue?: any;\n  name?: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: string) => void;\n  value?: any;\n  row?: boolean;\n  gap?: FlexProps['gap'];\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "RadioGroup.example.tsx",
          "code": "import React, { useState } from 'react';\nimport RadioGroup from './RadioGroup';\nimport RadioLabel from '../RadioLabel/RadioLabel';\n\n// Example of RadioGroup usage\nconst Example = () => {\n  const [checked, setChecked] = useState('B');\n\n  return (\n    <>\n      <RadioGroup defaultValue='A' value={checked} onChange={(_, value) => setChecked(value)}>\n        <RadioLabel label='Radio A' value='A' />\n        <RadioLabel label='Radio B' value='B' />\n        <RadioLabel label='Radio C' value='C' />\n      </RadioGroup>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "RadioLabel",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/RadioLabel/RadioLabel.example.tsx",
    "docs": {
      "import": {
        "code": "import { RadioLabel } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "RadioLabel.interface.ts",
          "code": "import { RadioProps } from '../Radio';\n\nexport interface RadioLabelProps extends Omit<RadioProps, 'onChange'> {\n  label: string;\n  caption?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "RadioLabel.example.tsx",
          "code": "import React from 'react';\nimport RadioLabel from './RadioLabel';\n\n// Example of RadioLabel usage\nconst Example = () => {\n\n  return (\n    <>\n      <RadioLabel label='Terms and Conditions' checked disabled />\n      <RadioLabel label='To-do' checked={false} caption='To-do caption' />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Rate",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Rate/Rate.example.tsx",
    "docs": {
      "import": {
        "code": "import { Rate } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Rate.interface.ts",
          "code": "import {SafeKeyOf} from \"../utils\"\nimport * as React from \"react\";\n\nexport interface RateType {\n    star: string\n    heart: string\n}\n\nexport interface RateSize {\n    xs: true\n    sm: true\n    md: true\n    lg: true\n    xl: true\n    xxl: true\n    xxxl: true\n}\n\nexport interface EmptyStyle {\n    filled: string\n    outline: string\n}\n\nexport interface RateProps {\n    onChange: (event: React.SyntheticEvent, value: number | null) => void;\n    type?: SafeKeyOf<RateType>\n    size?: SafeKeyOf<RateSize>\n    emptyStyle?: SafeKeyOf<EmptyStyle>\n    precision?: number\n    defaultValue?: number\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Rate.example.tsx",
          "code": "import React from 'react';\nimport Rate from './Rate';\nimport {Flex} from \"@xtreamsrl/ui-kit\";\n\n// Example of RateAndFeedback usage\nconst Example = () => {\n\n    return (\n        <>\n          <Flex gap='md-4'>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='star' emptyStyle={'filled'} size={'xs'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'sm'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'md'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'xl'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'xxl'} onChange={() => console.log(\"third\")}></Rate>\n              <Rate type='star' emptyStyle={'filled'} size={'xxxl'} onChange={() => console.log(\"fourth\")}></Rate>\n            </Flex>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='heart' emptyStyle={'filled'} size={'xs'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'sm'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'md'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'xl'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'xxl'} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'filled'} size={'xxxl'} onChange={() => {}}></Rate>\n            </Flex>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='star' size={'xs'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' size={'sm'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' size={'md'} onChange={(e, value) => console.log(value)}></Rate>\n              <Rate type='star' size={'xl'} onChange={(e) => console.log(e)}></Rate>\n              <Rate type='star' size={'xxl'} onChange={() => console.log(\"third\")}></Rate>\n              <Rate type='star' size={'xxxl'} onChange={() => console.log(\"fourth\")}></Rate>\n            </Flex>\n            <Flex direction='column' gap='sm-8'>\n              <Rate type='heart' emptyStyle={'outline'} size={'xs'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'sm'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'md'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'xl'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'xxl'} defaultValue={3.5} onChange={() => {}}></Rate>\n              <Rate type='heart' emptyStyle={'outline'} size={'xxxl'} defaultValue={3.5} onChange={() => {}}></Rate>\n            </Flex>\n          </Flex>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Select",
    "description": "Displays a list of options for the user to pick from—triggered by a button.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Select/Select.example.tsx",
    "docs": {
      "import": {
        "code": "import { Select } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Select.interface.ts",
          "code": "/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { TextLabelInputProps, CustomLabelInputProps } from '../TextInput';\n\nexport interface TextLabelSelectProps extends TextLabelInputProps {}\nexport interface CustomLabelSelectProps extends CustomLabelInputProps {}\n\nexport type SelectProps = TextLabelSelectProps | CustomLabelSelectProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Select.example.tsx",
          "code": "import React, { useState } from 'react';\nimport Select from './Select';\n\n// Example of Select usage\nconst Example = () => {\n  const [age, setAge] = useState<string | number | undefined>('');\n\n  return (\n    <>\n      <Select value={age} onChange={(e) => setAge(e.target.value as any)} label='Label' name='select'>\n        <Select.Option value={10}>Ten</Select.Option>\n        <Select.Option value={20}>Twenty</Select.Option>\n        <Select.Option value={30}>Thirty</Select.Option>\n      </Select>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "SidePanel",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/SidePanel/SidePanel.example.tsx",
    "docs": {
      "import": {
        "code": "import { SidePanel } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Action.interface.ts",
          "code": "import {MouseEventHandler} from \"react\";\n\nexport interface ActionProps {\n    children: string,\n    onClick: MouseEventHandler<HTMLButtonElement>\n}\n"
        },
        {
          "source": "Footer.interface.ts",
          "code": "import {SafeKeyOf} from \"../../utils\";\n\nexport interface SidePanelFooterType {\n    right: string;\n    left: string;\n    fullwidth: string;\n}\n\nexport interface SidePanelFooterProps {\n    divider?: boolean\n    children: React.ReactNode\n    type: SafeKeyOf<SidePanelFooterType>;\n}\n"
        },
        {
          "source": "Header.interface.ts",
          "code": "import {ReactNode} from \"react\";\n\nexport interface SidePanelHeaderProps {\n    title: string\n    children?: ReactNode;\n}\n"
        },
        {
          "source": "SidePanel.interface.ts",
          "code": "import React, {MouseEventHandler} from \"react\";\nimport {SafeKeyOf} from \"../utils\";\n\ninterface SidePanelAnchor {\n    bottom: true\n    left: true\n    right: true\n    top: true\n}\n\nexport interface SidePanelProps {\n    anchor?: SafeKeyOf<SidePanelAnchor>\n\n    open?: boolean\n    onClose?: MouseEventHandler<HTMLButtonElement>\n\n    children: React.ReactNode\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "SidePanel.example.tsx",
          "code": "import React, {useState} from 'react';\nimport SidePanel from './SidePanel';\nimport TextInput from \"../TextInput/TextInput\";\n\n// Example of SidePanel usage\nconst Example = () => {\n    const [open, setOpen] = useState(true);\n\n    return (\n        <>\n            {/* Not specifying the onClose function the close button will not show up */}\n            <SidePanel anchor={\"right\"} open={open} onClose={() => setOpen(false)}>\n                <SidePanel.Header title=\"Title\"/>\n\n                <SidePanel.Content>\n                    <TextInput label={\"Name\"} name={\"name\"}/>\n                    <TextInput label={\"Surname\"} name={\"surname\"}/>\n                    <TextInput label={\"Address\"} name={\"address\"}/>\n                    <TextInput label={\"City\"} name={\"city\"}/>\n                    <TextInput label={\"Country\"} name={\"country\"}/>\n                    <TextInput label={\"Postal code\"} name={\"postalCode\"}/>\n\n                    This is just text to see how it is displayed, ok really well\n                    So if i write a lot the size of this panel becomes enormous\n                </SidePanel.Content>\n\n                <SidePanel.Footer type='left'>\n                    <SidePanel.PrimaryAction onClick={() => console.log('click')}>\n                        Primary Action\n                    </SidePanel.PrimaryAction>\n                    <SidePanel.SecondaryAction onClick={() => console.log('click')}>\n                        Secondary Action\n                    </SidePanel.SecondaryAction>\n                </SidePanel.Footer>\n            </SidePanel>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Slider",
    "description": "An input where the user selects a value from within a given range.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Slider/Slider.example.tsx",
    "docs": {
      "import": {
        "code": "import { Slider } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Slider.interface.ts",
          "code": "import { SafeKeyOf } from '../utils'\nimport {LabelProps} from \"../TextInput/InputLabel\";\nimport {ReactNode} from \"react\";\n\nexport interface TickMarkType {\n  onlyMarks: string,\n  percentage: string,\n  dollars: string,\n  everyTenUnits: string\n}\n\ninterface BaseSliderProps {\n  name: string\n  disabled?: boolean\n  tickMark?: SafeKeyOf<TickMarkType>\n  step?: number\n  min?: number\n  max?: number\n}\n\ninterface SimpleSliderProps extends BaseSliderProps {\n  type: 'slider'\n  value: number\n  onChange: (value: number) => void\n}\n\ninterface RangeProps extends BaseSliderProps {\n  type: 'range'\n  value: [number, number]\n  onChange: (value: [number, number]) => void\n}\n\nexport interface TextLabelProps{\n  label: string;\n  labelProps?: Omit<LabelProps, 'children'>;\n}\n\nexport interface CustomLabelProps{\n  label: ReactNode;\n  labelProps?: undefined;\n}\n\nexport type SliderProps = (RangeProps | SimpleSliderProps) & (TextLabelProps | CustomLabelProps)\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Slider.example.tsx",
          "code": "import React, {useState} from 'react';\nimport Slider from './Slider';\n\n// Example of Slider usage\nconst Example = () => {\n  const [slider, setSlider] = useState<number>(0);\n  const [range, setRange] = useState<[number, number]>([1, 2]);\n\n  return (\n    <>\n      <Slider type='range' name='range' label='Range' labelProps={{size: 'sm', required: true}} tickMark='percentage' value={range} onChange={(value) => setRange(value)}/>\n      <Slider type='slider' name='slider' label='SliderDollars' tickMark='dollars' min={100} max={10000} value={slider} onChange={(value) => setSlider(value)}/>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Spinner",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Spinner/Spinner.example.tsx",
    "docs": {
      "import": {
        "code": "import { Spinner } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Spinner.interface.ts",
          "code": "import {SafeKeyOf} from '../utils'\n\ninterface SpinnerSize {\n    12: true,\n    14: true,\n    16: true,\n    20: true,\n    24: true,\n    28: true,\n    32: true\n}\n\nexport interface SpinnerProps {\n    size?: SafeKeyOf<SpinnerSize>\n    inverted?: boolean\n    state?: 'determinate' | 'indeterminate'\n    value?: number\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Spinner.example.tsx",
          "code": "import React from 'react';\nimport Spinner from './Spinner';\nimport {Flex} from \"@xtreamsrl/ui-kit\";\n\n// Example of Spinner usage\nconst Example = () => {\n\n    return (\n        <>\n            <Flex gap='md-5'>\n                <Flex direction='column' gap='sm-6'>\n                    <Spinner size={12}/>\n                    <Spinner size={14}/>\n                    <Spinner size={16}/>\n                    <Spinner size={20}/>\n                    <Spinner size={24}/>\n                    <Spinner size={28}/>\n                    <Spinner size={32}/>\n                </Flex>\n                <Flex direction='column' gap='sm-6'>\n                    <Spinner size={12} state='determinate' value={25}/>\n                    <Spinner size={14} state='determinate' value={25}/>\n                    <Spinner size={16} state='determinate' value={25}/>\n                    <Spinner size={20} state='determinate' value={25}/>\n                    <Spinner size={24} state='determinate' value={25}/>\n                    <Spinner size={28} state='determinate' value={25}/>\n                    <Spinner size={32} state='determinate' value={25}/>\n                </Flex>\n                <Flex direction='column' gap='sm-6' backgroundColor='grey'>\n                    <Spinner inverted size={12}/>\n                    <Spinner inverted size={14}/>\n                    <Spinner inverted size={16}/>\n                    <Spinner inverted size={20}/>\n                    <Spinner inverted size={24}/>\n                    <Spinner inverted size={28}/>\n                    <Spinner inverted size={32}/>\n                </Flex>\n                <Flex direction='column' gap='sm-6' backgroundColor='grey'>\n                    <Spinner size={12} inverted state='determinate' value={25}/>\n                    <Spinner size={14} inverted state='determinate' value={25}/>\n                    <Spinner size={16} inverted state='determinate' value={25}/>\n                    <Spinner size={20} inverted state='determinate' value={25}/>\n                    <Spinner size={24} inverted state='determinate' value={25}/>\n                    <Spinner size={28} inverted state='determinate' value={25}/>\n                    <Spinner size={32} inverted state='determinate' value={25}/>\n                </Flex>\n            </Flex>\n        </>\n    );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Step",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Step/Step.example.tsx",
    "docs": {
      "import": {
        "code": "import { Step } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Step.interface.ts",
          "code": "import { State } from \"../utils\";\n\nexport interface StepProps extends Pick<State, 'error'> {\n  label: string;\n  caption?: string;\n}\n"
        },
        {
          "source": "StepIcon.interface.ts",
          "code": "\nexport interface StepIconProps {\n  active?: boolean;\n  completed?: boolean;\n  error?: boolean;\n  icon?: string;\n}\n"
        },
        {
          "source": "StepLabel.interface.ts",
          "code": "\nexport interface StepLabelProps {\n  caption?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Step.example.tsx",
          "code": "import React from 'react';\nimport Step from \"./Step\";\n\n// Example of Step usage\nconst Example = () => {\n\n  return (\n    <>\n      <Step label='Compile' />\n      <Step label=\"Review\" caption='description' />\n      <Step label=\"Feedback\" caption='description' error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Stepper",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Stepper/Stepper.example.tsx",
    "docs": {
      "import": {
        "code": "import { Stepper } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Stepper.interface.ts",
          "code": "\nexport interface StepperProps {\n  activeStep: number;\n  orientation?: 'horizontal' | 'vertical';\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Stepper.example.tsx",
          "code": "import React, { useState } from 'react';\nimport Stepper from \"./Stepper\";\nimport Step from \"../Step/Step\";\nimport Button from \"../Button/Button\";\nimport Flex from \"../Flex/Flex\";\n\n\n// Example of Stepper usage\nconst Example = () => {\n  const steps = ['Select', 'Create', 'Review', 'Confirm'];\n  const [step, setStep] = useState(2);\n\n  return (\n    <>\n      <Stepper activeStep={step}>\n        {steps.map((label) => (\n          <Step key={label} label={label} />\n        ))}\n      </Stepper>\n      <Flex>\n        <Button onClick={() => setStep(prev => prev - 1)}>Back</Button>\n        <Button onClick={() => setStep(prev => prev + 1)}>Next</Button>\n      </Flex>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Switch",
    "description": "A control that allows the user to toggle between checked and not checked.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Switch/Switch.example.tsx",
    "docs": {
      "import": {
        "code": "import { Switch } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Switch.interface.ts",
          "code": "import { SyntheticEvent } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\n\nexport interface SwitchProps extends State {\n  onChange?: (event: SyntheticEvent<Element, Event>, checked: boolean) => void\n  checked?: boolean;\n  size?: SafeKeyOf<Omit<Size, 'lg'>>;\n  indeterminate?: boolean;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Switch.example.tsx",
          "code": "import React from 'react';\nimport Switch from './Switch';\n\n// Example of Switch usage\nconst Example = () => {\n\n  return (\n    <>\n      <Switch />\n      <Switch checked />\n      <Switch checked loading />\n      <Switch checked disabled />\n      <Switch checked indeterminate />\n      <Switch checked loading error />\n    </>\n\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "SwitchLabel",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/SwitchLabel/SwitchLabel.example.tsx",
    "docs": {
      "import": {
        "code": "import { SwitchLabel } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "SwitchLabel.interface.ts",
          "code": "import { SwitchProps } from '../Switch';\n\nexport interface SwitchLabelProps extends Omit<SwitchProps, 'onChange'> {\n  label: string;\n  caption?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "SwitchLabel.example.tsx",
          "code": "import React from 'react';\nimport SwitchLabel from './SwitchLabel';\n\n// Example of SwitchLabel usage\nconst Example = () => {\n\n  return (\n    <>\n      <SwitchLabel label='Terms and Conditions' checked disabled />\n      <SwitchLabel label='To-do' checked={false} caption='To-do caption' />\n      <SwitchLabel label='To-do' caption='To-do caption' indeterminate />\n      <SwitchLabel label='To-do' caption='To-do caption' loading />\n      <SwitchLabel label='To-do' caption='To-do caption' error />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Table",
    "description": "A responsive table component.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Table/Table.example.tsx",
    "docs": {
      "import": {
        "code": "import { Table } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Table.interface.ts",
          "code": "import React from 'react';\nimport { Row, SortingRule } from 'react-table';\nimport TableRow from '@mui/material/TableRow';\nimport { ColumnsDefinition } from './types';\n\n/**\n * @interface TableProps\n * @member {ColumnsDefinition<T extends object>} columnsDefinition make sure it is stable (memoize if necessary)\n */\nexport interface TableProps<T extends object> {\n  data: T[];\n  columnsDefinition: ColumnsDefinition<T>;\n  noItemsPlaceholder: React.ReactNode;\n  keyExtractor: (data: T) => string | number;\n\n  listTestId?: string;\n  itemsToShowBeforeScroll?: number;\n\n  loading?: boolean;\n  infiniteLoader?: {\n    isItemLoaded: (index: number) => boolean;\n    loadMoreItems: (startIndex: number, stopIndex: number) => void;\n    threshold?: number;\n  };\n\n  serverSideSorting?: boolean;\n  initialSort?: { id: string; desc: boolean }[];\n  onSortChange?: (sorting: SortingRule<T>[]) => void;\n\n  customHeaderContent?: React.JSXElementConstructor<any> | undefined;\n\n  rowTestIdBuilder?: (data: T) => string;\n  rowHeight?: number;\n  rowPropsOverride?: Partial<React.ComponentProps<typeof TableRow>>;\n  onRowClick?: (data: T, index: number) => void;\n  onRowsSelected?: (selectedRows: Row<T>[]) => void;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Table.example.tsx",
          "code": "import React, { useMemo } from 'react';\nimport Table from './Table';\nimport { Button, ColumnsDefinition, Dropmenu, Icon, Typography, useDropmenu } from '../index';\n\ntype Data = { user: string; nickname: string; email: string };\nexport const columnsDefinition: (tr: any) => ColumnsDefinition<Data> = ({ translate, dateTimeFormat }) => ([\n  {\n    accessor: 'user',\n    Header: () => 'User',\n    Cell: ({ rowData }) => {\n      const { user, nickname } = rowData;\n\n      return (\n        <>\n          <Typography variant='body/sm/regular'>{user}</Typography>\n          <Typography variant='body/xs/regular' color=\"grey.11\">\n            {nickname}\n          </Typography>\n        </>\n      );\n    },\n    align: 'start',\n    sortable: true,\n  },\n  {\n    accessor: 'email',\n    Header: () => 'Email',\n    Cell: ({ rowData }) => rowData.email,\n    align: 'start',\n  },\n  {\n    id: 'actions',\n    accessor: () => null,\n    Header: () => '',\n    Cell: ({ rowData }) => {\n      const { anchorEl, isOpen, openDropmenu, closeDropmenu } = useDropmenu();\n\n      return (\n        <div>\n          <Button onClick={openDropmenu} size='sm' variant='outlined' color='grey' icon={<Icon name='MoreVertical' />} onlyIcon />\n\n          <Dropmenu open={isOpen} anchorEl={anchorEl} onClose={closeDropmenu}>\n            <Dropmenu.Header>Header</Dropmenu.Header>\n            <Dropmenu.Item onClick={() => ''} size='sm' startAddOn={<Icon name='Home' />} endAddOn='AAAA' value={10}>Ten</Dropmenu.Item>\n            <Dropmenu.Item onClick={() => ''} size='sm' value={20}>Twenty</Dropmenu.Item>\n            <Dropmenu.Item disabled onClick={() => ''} size='sm' value={30}>Thirty</Dropmenu.Item>\n            <Dropmenu.Footer>Footer</Dropmenu.Footer>\n          </Dropmenu>\n        </div>\n      )\n    },\n    align: 'end',\n  },\n]);\n\n\n// Example of Table usage\nconst Example = () => {\n  // const t = useTranslate();\n  // const d = useDateTimeFormat();\n\n  // NOTE: columns definition always has to be stable\n  const cols = useMemo(() => {\n    return columnsDefinition({ translate: () => '', dateTimeFormat: () => '' });\n    // TODO: include t and d translation funcs in deps array\n  }, []);\n\n  return (\n    <>\n      <Table\n        columnsDefinition={cols}\n        data={[\n          { user: 'John Doe', nickname: '@John', email: 'john.doe@gmail.com' },\n          { user: 'Jane Doe', nickname: '@Jane', email: 'jane.doe@gmail.com' },\n        ]}\n        keyExtractor={c => c.user}\n        loading={false}\n        onRowClick={() => 'click'}\n        itemsToShowBeforeScroll={8}\n        initialSort={[{ id: 'user', desc: true }]}\n        noItemsPlaceholder='No users'\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Tabs",
    "description": "A set of layered sections of content—known as tab panels—that are displayed one at a time.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Tabs/Tabs.example.tsx",
    "docs": {
      "import": {
        "code": "import { Tabs } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Tab.interface.ts",
          "code": "import { ReactElement, ReactNode } from 'react';\n\nexport interface TabProps {\n  children: string;\n  icon?: ReactElement;\n  badge?: ReactNode;\n  value: any;\n}\n"
        },
        {
          "source": "Tabs.interface.ts",
          "code": "import * as React from 'react';\nimport { SafeKeyOf, Size } from '../utils';\n\nexport interface TabsOrientation {\n  horizontal: true;\n  vertical: true;\n}\n\n/**\n * @interface TabsProps\n * @member {T extends any} currentTab usually is the tab child index\n */\nexport interface TabsProps<T> {\n  currentTab: T;\n  size?: SafeKeyOf<Size>;\n  fullWidth?: boolean;\n  orientation?: SafeKeyOf<TabsOrientation>;\n  onChange?: (event: React.SyntheticEvent, currentTab: T) => void;\n  testId?: string;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Tabs.example.tsx",
          "code": "import React, { useState } from 'react';\nimport { Icon } from '../Icon';\nimport Tabs from './Tabs';\n\n// Example of Tabs usage\nconst Example = () => {\n  const [currentTab, setCurrentTab] = useState(0);\n\n  return (\n    <>\n      <Tabs size='sm' currentTab={currentTab} fullWidth onChange={(_, t) => setCurrentTab(t)}>\n        <Tabs.Tab icon={<Icon name='Home' />} value={0}>Home</Tabs.Tab>\n        <Tabs.Tab value={1}>Profile</Tabs.Tab>\n        <Tabs.Tab value={2}>Settings</Tabs.Tab>\n      </Tabs>\n\n      <Tabs orientation='vertical' size='sm' currentTab={currentTab} onChange={(e, t) => setCurrentTab(t)}>\n        <Tabs.Tab icon={<Icon name='Home' />} value={0}>Home</Tabs.Tab>\n        <Tabs.Tab value={1}>Profile</Tabs.Tab>\n        <Tabs.Tab value={2}>Settings</Tabs.Tab>\n      </Tabs>\n\n      {[0, 1, 2].map((index) => {\n        return (\n          <Tabs.Panel index={index} currentTab={currentTab}>\n            {`Tab Content: ${index}`}\n          </Tabs.Panel>\n        )\n      })}\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Tag",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Tag/Tag.example.tsx",
    "docs": {
      "import": {
        "code": "import { Tag } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Tag.interface.ts",
          "code": "import { SafeKeyOf, Size } from '../utils';\nimport { MouseEventHandler, ReactElement } from 'react';\n\ntype TagSize = SafeKeyOf<Size>;\n\nexport interface TagVariant {\n  contained: true;\n  outlined: true;\n  tinted: true;\n  text: true;\n}\n\nexport interface TagProps {\n  text: string;\n  onClick?: MouseEventHandler<HTMLDivElement>;\n  onDelete?: MouseEventHandler<HTMLDivElement>;\n  testId?: string;\n  variant?: SafeKeyOf<TagVariant>;\n  size?: TagSize;\n  icon?: ReactElement;\n  checked?: boolean;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Tag.example.tsx",
          "code": "import React from 'react';\nimport Tag from './Tag';\n\n// Example of Tag usage\nconst Example = () => {\n  return (\n    <>\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid1\"\n      />\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid2\"\n        checked\n      />\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid3\"\n        size=\"md\"\n        variant=\"outlined\"\n      />\n      <Tag\n        text=\"Tag\"\n        onDelete={() => alert('ondeleteclick')}\n        onClick={() => alert('onclickclick')}\n        testId=\"testid4\"\n        size=\"sm\"\n        variant=\"text\"\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "TextInput",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/TextInput/TextInput.example.tsx",
    "docs": {
      "import": {
        "code": "import { TextInput } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "InputAddOn.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf, Size } from '../../utils';\n\nexport interface InputAddOnBaseProps {\n  size?: SafeKeyOf<Size>;\n}\n\nexport interface TextAddOnProps extends InputAddOnBaseProps {\n  children: string;\n}\n\nexport interface IconAddOnProps extends InputAddOnBaseProps {\n  children: ReactNode;\n}\n\n// TODO: handle other AddOn types\nexport type InputAddOnProps = TextAddOnProps | IconAddOnProps;\n"
        },
        {
          "source": "InputLabel.interface.ts",
          "code": "import { ReactNode } from 'react';\nimport { SafeKeyOf, Size } from '../../utils';\n\nexport interface LabelProps {\n  children: string;\n  htmlFor?: string;\n  size?: Exclude<SafeKeyOf<Size>,'lg'>;\n  description?: string;\n  icon?: ReactNode;\n  required?: boolean;\n}\n"
        },
        {
          "source": "TextInput.interface.ts",
          "code": "/* eslint-disable @typescript-eslint/no-empty-interface */\nimport React, { ReactNode, HTMLInputTypeAttribute, ReactElement, ChangeEventHandler, MouseEventHandler } from 'react';\nimport { SafeKeyOf, Size, State } from '../utils';\nimport { LabelProps } from './InputLabel/InputLabel.interface';\n\ntype TextInputPropsSize = SafeKeyOf<Size>;\n\nexport interface HintProps {\n  size?: Exclude<TextInputPropsSize , 'lg'>;\n}\n\ninterface TextInputLabelProps {\n  label?: string | ReactNode;\n  labelProps?: Omit<LabelProps, 'children' | 'required'>;\n}\n\ninterface TextInputHintProps {\n  hint?: string;\n  hintProps?: HintProps;\n}\n\nexport interface TextInputVariant {\n  outlined: true;\n  standard: true;\n  filled: true;\n}\n\n// TextInput states: hovered, pressed, focused, disabled, error\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TextInputState extends Omit<State, 'loading' | 'pressed'> {}\n\nexport interface SelectInputProps {\n  select?: boolean;\n  onSelect?:  React.ReactEventHandler<HTMLDivElement>;\n  children?: ReactNode;\n}\n\nexport interface BaseTextInputProps extends TextInputState, TextInputLabelProps, TextInputHintProps, SelectInputProps {\n  className?: string;\n  readonly?: boolean;\n  testId?: string;\n  name: string;\n  onChange?: ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onClick?: MouseEventHandler<HTMLDivElement>;\n  type?: HTMLInputTypeAttribute;\n  variant?: SafeKeyOf<TextInputVariant>;\n  onBlur?: () => void;\n  inputRef?: React.Ref<any>;\n  size?: TextInputPropsSize;\n  value?: unknown;\n  required?: boolean;\n  multiline?: boolean;\n  autoComplete?: string;\n  startInputAddOn?: ReactElement;\n  endInputAddOn?: ReactElement;\n  placeholder?: string;\n}\n\nexport interface TextLabelInputProps extends BaseTextInputProps {\n  label: string;\n  labelProps?: Omit<LabelProps, 'children' | 'required'>;\n}\nexport interface CustomLabelInputProps extends BaseTextInputProps {\n  label: ReactNode;\n  labelProps?: undefined;\n}\n\nexport type TextInputProps = TextLabelInputProps | CustomLabelInputProps;\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "TextInput.example.tsx",
          "code": "import React from 'react';\nimport TextInput from './TextInput';\n\n// Example of TextInput usage\nconst Example = () => {\n\n  return (\n    <>\n      <TextInput name='email' onChange={() => ''} value='value' required label={<TextInput.Label>Email</TextInput.Label>}  />\n      <TextInput\n        name='phone'\n        onChange={() => ''}\n        value='value'\n        label='Phone Number'\n        labelProps={{ size: 'md', description: 'Your contact number' }}\n        startInputAddOn={<TextInput.AddOn>+39</TextInput.AddOn>}\n        hint='Italian phone number'\n        hintProps={{ size: 'sm' }}\n      />\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Tooltip",
    "description": "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Tooltip/Tooltip.example.tsx",
    "docs": {
      "import": {
        "code": "import { Tooltip } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Tooltip.interface.ts",
          "code": "import { DimensionsProps, Placement, SafeKeyOf } from '../utils';\nimport { ReactElement } from 'react';\n\nexport interface TooltipVariant {\n  dark: boolean;\n  light: boolean;\n}\n\nexport interface TooltipProps {\n  text: string;\n  children: ReactElement;\n  hasArrow?: boolean;\n  caption?: string;\n  variant?: SafeKeyOf<TooltipVariant>;\n  width?: DimensionsProps['width'];\n  testId?: string;\n  placement?: SafeKeyOf<Placement>;\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Tooltip.example.tsx",
          "code": "import React from 'react';\nimport Tooltip from './Tooltip';\nimport { Icon } from \"../Icon\";\n\n// Example of Tag usage\nconst Example = () => {\n  return (\n    <>\n      <Tooltip text=\"It's a tooltip\" hasArrow={false}>\n        <Icon name=\"Diamond\" />\n      </Tooltip>\n      <Tooltip text=\"It's a tooltip\" caption=\"caption\" variant=\"light\" placement=\"right\">\n        <Icon name=\"Diamond\" />\n      </Tooltip>\n      <Tooltip text=\"It's a tooltip\" caption=\"caption\" width={280}>\n        <Icon name=\"Diamond\" />\n      </Tooltip>\n    </>\n  );\n};\n"
        }
      ]
    }
  },
  {
    "name": "Typography",
    "description": "",
    "docs_path": "gits/enterprise-react/libs/react-ui-kit/src/Typography/Typography.example.tsx",
    "docs": {
      "import": {
        "code": "import { Typography } from '@xtreamsrl/react-ui-kit';"
      },
      "info": [
        {
          "source": "Typography.interface.ts",
          "code": "import { CSSProperties, MouseEventHandler, ReactNode } from 'react';\nimport { SxProps, Theme } from '@mui/material';\nimport { Color, SafeKeyOf } from '../utils';\n\nexport interface BodyTypographyVariants {\n  'body/xs/regular': true;\n  'body/xs/medium': true;\n  'body/xs/underline-medium': true;\n  'body/xs/semibold': true;\n  'body/xs/bold': true;\n  'body/xs/black': true;\n\n  'body/sm/regular': true;\n  'body/sm/medium': true;\n  'body/sm/underline-medium': true;\n  'body/sm/semibold': true;\n  'body/sm/bold': true;\n  'body/sm/black': true;\n\n  'body/base/regular': true;\n  'body/base/medium': true;\n  'body/base/underline-medium': true;\n  'body/base/semibold': true;\n  'body/base/bold': true;\n  'body/base/black': true;\n\n  'body/lg/regular': true;\n  'body/lg/medium': true;\n  'body/lg/semibold': true;\n  'body/lg/bold': true;\n  'body/lg/black': true;\n\n  'body/xl/regular': true;\n  'body/xl/medium': true;\n  'body/xl/semibold': true;\n  'body/xl/bold': true;\n  'body/xl/black': true;\n\n  'body/xxl/regular': true;\n  'body/xxl/medium': true;\n  'body/xxl/semibold': true;\n  'body/xxl/bold': true;\n  'body/xxl/black': true;\n}\n\nexport interface HeaderTypographyVariants {\n\n  'header/sm/regular': true;\n  'header/sm/medium': true;\n  'header/sm/semibold': true;\n  'header/sm/bold': true;\n  'header/sm/black': true;\n\n  'header/md/regular': true;\n  'header/md/medium': true;\n  'header/md/semibold': true;\n  'header/md/bold': true;\n  'header/md/black': true;\n\n  'header/lg/regular': true;\n  'header/lg/medium': true;\n  'header/lg/semibold': true;\n  'header/lg/bold': true;\n  'header/lg/black': true;\n}\n\nexport interface DisplayTypographyVariants {\n\n  'display/sm/regular': true;\n  'display/sm/medium': true;\n  'display/sm/semibold': true;\n  'display/sm/bold': true;\n  'display/sm/black': true;\n\n  'display/md/regular': true;\n  'display/md/medium': true;\n  'display/md/semibold': true;\n  'display/md/bold': true;\n  'display/md/black': true;\n\n  'display/lg/regular': true;\n  'display/lg/medium': true;\n  'display/lg/semibold': true;\n  'display/lg/bold': true;\n  'display/lg/black': true;\n\n  'display/xl/regular': true;\n  'display/xl/medium': true;\n  'display/xl/semibold': true;\n  'display/xl/bold': true;\n  'display/xl/black': true;\n\n  'display/xxl/regular': true;\n  'display/xxl/medium': true;\n  'display/xxl/semibold': true;\n  'display/xxl/bold': true;\n  'display/xxl/black': true;\n}\nexport interface TypographyVariants extends BodyTypographyVariants, HeaderTypographyVariants, DisplayTypographyVariants {}\n\nexport interface TypographyProps {\n  children: ReactNode;\n  style?: SxProps<Theme>;\n  testId?: string;\n  variant?: SafeKeyOf<TypographyVariants>;\n  fontSize?: CSSProperties['fontSize'];\n  color?: Color;\n  fontWeight?: CSSProperties['fontWeight'];\n  textTransform?: CSSProperties['textTransform'];\n  textAlign?: CSSProperties['textAlign'];\n  onClick?: MouseEventHandler<HTMLElement>;\n  noWrap?: boolean;\n  whiteSpace?: CSSProperties['whiteSpace'];\n  textOverflow?: CSSProperties['textOverflow'];\n}\n"
        },
        {
          "source": "utils.ts",
          "code": "// eslint-disable-next-line @typescript-eslint/no-empty-interface\nimport React, { Children, CSSProperties } from 'react';\n\nexport interface Spacing {\n  0: number;\n  'sm-1': number;\n  'sm-2': number;\n  'sm-3': number;\n  'sm-4': number;\n  'sm-5': number;\n  'sm-6': number;\n  'sm-7': number;\n  'sm-8': number;\n  'md-1': number;\n  'md-2': number;\n  'md-3': number;\n  'md-4': number;\n  'md-5': number;\n  'md-7': number;\n  'md-8': number;\n  'lg-1': number;\n  'lg-2': number;\n  'xl-1': number;\n  'xl-2': number;\n}\n\nexport type Space = SafeKeyOf<Spacing>;\n// TODO: handle this in createTheme\nexport const SPACING: Spacing = {\n  0: 0,\n  'sm-1': 2,\n  'sm-2': 4,\n  'sm-3': 6,\n  'sm-4': 8,\n  'sm-5': 10,\n  'sm-6': 12,\n  'sm-7': 14,\n  'sm-8': 16,\n  'md-1': 20,\n  'md-2': 24,\n  'md-3': 28,\n  'md-4': 32,\n  'md-5': 36,\n  'md-7': 44,\n  'md-8': 48,\n  'lg-1': 56,\n  'lg-2': 64,\n  'xl-1': 80,\n  'xl-2': 96,\n};\n\nexport const margins: Required<MarginProps> = {\n  m: 0,\n  margin: 0,\n  mt: 0,\n  marginTop: 0,\n  mr: 0,\n  marginRight: 0,\n  mb: 0,\n  marginBottom: 0,\n  ml: 0,\n  marginLeft: 0,\n  mx: 0,\n  marginX: 0,\n  my: 0,\n  marginY: 0,\n};\n\nexport const paddings: Required<PaddingProps> = {\n  p: 0,\n  padding: 0,\n  pt: 0,\n  paddingTop: 0,\n  pr: 0,\n  paddingRight: 0,\n  pb: 0,\n  paddingBottom: 0,\n  pl: 0,\n  paddingLeft: 0,\n  px: 0,\n  paddingX: 0,\n  py: 0,\n  paddingY: 0,\n};\n\nexport interface MarginProps {\n  m?: ResponsiveStyleValue<number | string | Space>;\n  margin?: ResponsiveStyleValue<number | string | Space>;\n  mt?: ResponsiveStyleValue<number | string | Space>;\n  marginTop?: ResponsiveStyleValue<number | string | Space>;\n  mr?: ResponsiveStyleValue<number | string | Space>;\n  marginRight?: ResponsiveStyleValue<number | string | Space>;\n  mb?: ResponsiveStyleValue<number | string | Space>;\n  marginBottom?: ResponsiveStyleValue<number | string | Space>;\n  ml?: ResponsiveStyleValue<number | string | Space>;\n  marginLeft?: ResponsiveStyleValue<number | string | Space>;\n  mx?: ResponsiveStyleValue<number | string | Space>;\n  marginX?: ResponsiveStyleValue<number | string | Space>;\n  my?: ResponsiveStyleValue<number | string | Space>;\n  marginY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface PaddingProps {\n  p?: ResponsiveStyleValue<number | string | Space>;\n  padding?: ResponsiveStyleValue<number | string | Space>;\n  pt?: ResponsiveStyleValue<number | string | Space>;\n  paddingTop?: ResponsiveStyleValue<number | string | Space>;\n  pr?: ResponsiveStyleValue<number | string | Space>;\n  paddingRight?: ResponsiveStyleValue<number | string | Space>;\n  pb?: ResponsiveStyleValue<number | string | Space>;\n  paddingBottom?: ResponsiveStyleValue<number | string | Space>;\n  pl?: ResponsiveStyleValue<number | string | Space>;\n  paddingLeft?: ResponsiveStyleValue<number | string | Space>;\n  px?: ResponsiveStyleValue<number | string | Space>;\n  paddingX?: ResponsiveStyleValue<number | string | Space>;\n  py?: ResponsiveStyleValue<number | string | Space>;\n  paddingY?: ResponsiveStyleValue<number | string | Space>;\n}\n\nexport interface State {\n  disabled?: boolean;\n  loading?: boolean;\n  error?: boolean;\n}\n\nexport interface Size {\n  sm: true;\n  md: true;\n  lg: true;\n}\n\nexport interface ThemeColor {\n  brand: true;\n  grey: true;\n  red: true;\n  white: true;\n  green: true;\n  amber: true;\n\n  success: true;\n  warning: true;\n  error: true;\n  info: true;\n}\n\nexport type Color = SafeKeyOf<ThemeColor> | AnyOtherString;\n\nexport interface Placement {\n  'bottom-end': true;\n  'bottom-start': true;\n  bottom: true;\n  'left-end': true;\n  'left-start': true;\n  left: true;\n  'right-end': true;\n  'right-start': true;\n  right: true;\n  'top-end': true;\n  'top-start': true;\n  top: true;\n}\n\nexport type DimensionsProps = {\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type AnyOtherString = string & {};\nexport type SafeKeyOf<T> = keyof T extends never ? string : keyof T;\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport const findChild = (children: React.ReactNode, displayName: string) => Children.toArray(children).find(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\nexport const findChildren = (children: React.ReactNode, displayName: string) => Children.toArray(children).filter(\n  ch =>\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    typeof ch === 'object' && displayName === ch.type.displayName,\n);\n\nexport const childrenLength = (children: React.ReactNode) => Children.toArray(children).length;\n"
        }
      ],
      "examples": [
        {
          "source": "Typography.example.tsx",
          "code": "import React from 'react';\nimport Typography from './Typography';\n\n// Example of Typography usage\nconst Example = () => {\n\n  return (\n    <>\n      <Typography>body/base/regular</Typography>\n      <Typography variant='header/lg/regular' color='brand'>header/lg/regular</Typography>\n    </>\n  );\n};\n"
        }
      ]
    }
  }
]